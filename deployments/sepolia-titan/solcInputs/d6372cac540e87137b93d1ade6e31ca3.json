{
  "language": "Solidity",
  "sources": {
    "@safe-global/mock-contract/contracts/MockContract.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity >=0.7.0 <0.9.0;\n\ninterface MockInterface {\n\t/**\n\t * @dev After calling this method, the mock will return `response` when it is called\n\t * with any calldata that is not mocked more specifically below\n\t * (e.g. using givenMethodReturn).\n\t * @param response ABI encoded response that will be returned if method is invoked\n\t */\n\tfunction givenAnyReturn(bytes calldata response) external;\n\tfunction givenAnyReturnBool(bool response) external;\n\tfunction givenAnyReturnUint(uint response) external;\n\tfunction givenAnyReturnAddress(address response) external;\n\n\tfunction givenAnyRevert() external;\n\tfunction givenAnyRevertWithMessage(string calldata message) external;\n\tfunction givenAnyRunOutOfGas() external;\n\n\t/**\n\t * @dev After calling this method, the mock will return `response` when the given\n\t * methodId is called regardless of arguments. If the methodId and arguments\n\t * are mocked more specifically (using `givenMethodAndArguments`) the latter\n\t * will take precedence.\n\t * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\n\t * @param response ABI encoded response that will be returned if method is invoked\n\t */\n\tfunction givenMethodReturn(bytes calldata method, bytes calldata response) external;\n\tfunction givenMethodReturnBool(bytes calldata method, bool response) external;\n\tfunction givenMethodReturnUint(bytes calldata method, uint response) external;\n\tfunction givenMethodReturnAddress(bytes calldata method, address response) external;\n\tfunction givenMethodReturnBytes32(bytes calldata method, bytes32 response) external;\n\n\tfunction givenMethodRevert(bytes calldata method) external;\n\tfunction givenMethodRevertWithMessage(bytes calldata method, string calldata message) external;\n\tfunction givenMethodRunOutOfGas(bytes calldata method) external;\n\n\t/**\n\t * @dev After calling this method, the mock will return `response` when the given\n\t * methodId is called with matching arguments. These exact calldataMocks will take\n\t * precedence over all other calldataMocks.\n\t * @param call ABI encoded calldata (methodId and arguments)\n\t * @param response ABI encoded response that will be returned if contract is invoked with calldata\n\t */\n\tfunction givenCalldataReturn(bytes calldata call, bytes calldata response) external;\n\tfunction givenCalldataReturnBool(bytes calldata call, bool response) external;\n\tfunction givenCalldataReturnUint(bytes calldata call, uint response) external;\n\tfunction givenCalldataReturnAddress(bytes calldata call, address response) external;\n\tfunction givenCalldataReturnBytes32(bytes calldata call, bytes32 response) external;\n\n\tfunction givenCalldataRevert(bytes calldata call) external;\n\tfunction givenCalldataRevertWithMessage(bytes calldata call, string calldata message) external;\n\tfunction givenCalldataRunOutOfGas(bytes calldata call) external;\n\n\t/**\n\t * @dev Returns the number of times anything has been called on this mock since last reset\n\t */\n\tfunction invocationCount() external returns (uint);\n\n\t/**\n\t * @dev Returns the number of times the given method has been called on this mock since last reset\n\t * @param method ABI encoded methodId. It is valid to pass full calldata (including arguments). The mock will extract the methodId from it\n\t */\n\tfunction invocationCountForMethod(bytes calldata method) external returns (uint);\n\n\t/**\n\t * @dev Returns the number of times this mock has been called with the exact calldata since last reset.\n\t * @param call ABI encoded calldata (methodId and arguments)\n\t */\n\tfunction invocationCountForCalldata(bytes calldata call) external returns (uint);\n\n\t/**\n\t * @dev Resets all mocked methods and invocation counts.\n\t */\n\t function reset() external;\n}\n\n/**\n * Implementation of the MockInterface.\n */\ncontract MockContract is MockInterface {\n\tenum MockType { Return, Revert, OutOfGas }\n\t\n\tbytes32 public constant MOCKS_LIST_START = hex\"01\";\n\tbytes public constant MOCKS_LIST_END = \"0xff\";\n\tbytes32 public constant MOCKS_LIST_END_HASH = keccak256(MOCKS_LIST_END);\n\tbytes4 public constant SENTINEL_ANY_MOCKS = hex\"01\";\n\tbytes public constant DEFAULT_FALLBACK_VALUE = abi.encode(false);\n\n\t// A linked list allows easy iteration and inclusion checks\n\tmapping(bytes32 => bytes) calldataMocks;\n\tmapping(bytes => MockType) calldataMockTypes;\n\tmapping(bytes => bytes) calldataExpectations;\n\tmapping(bytes => string) calldataRevertMessage;\n\tmapping(bytes32 => uint) calldataInvocations;\n\n\tmapping(bytes4 => bytes4) methodIdMocks;\n\tmapping(bytes4 => MockType) methodIdMockTypes;\n\tmapping(bytes4 => bytes) methodIdExpectations;\n\tmapping(bytes4 => string) methodIdRevertMessages;\n\tmapping(bytes32 => uint) methodIdInvocations;\n\n\tMockType fallbackMockType;\n\tbytes fallbackExpectation = DEFAULT_FALLBACK_VALUE;\n\tstring fallbackRevertMessage;\n\tuint invocations;\n\tuint resetCount;\n\n\tconstructor() {\n\t\tcalldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\n\t\tmethodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\n\t}\n\n\tfunction trackCalldataMock(bytes memory call) private {\n\t\tbytes32 callHash = keccak256(call);\n\t\tif (calldataMocks[callHash].length == 0) {\n\t\t\tcalldataMocks[callHash] = calldataMocks[MOCKS_LIST_START];\n\t\t\tcalldataMocks[MOCKS_LIST_START] = call;\n\t\t}\n\t}\n\n\tfunction trackMethodIdMock(bytes4 methodId) private {\n\t\tif (methodIdMocks[methodId] == 0x0) {\n\t\t\tmethodIdMocks[methodId] = methodIdMocks[SENTINEL_ANY_MOCKS];\n\t\t\tmethodIdMocks[SENTINEL_ANY_MOCKS] = methodId;\n\t\t}\n\t}\n\n\tfunction _givenAnyReturn(bytes memory response) internal {\n\t\tfallbackMockType = MockType.Return;\n\t\tfallbackExpectation = response;\n\t}\n\n\tfunction givenAnyReturn(bytes calldata response) override external {\n\t\t_givenAnyReturn(response);\n\t}\n\n\tfunction givenAnyReturnBool(bool response) override external {\n\t\tuint flag = response ? 1 : 0;\n\t\t_givenAnyReturn(uintToBytes(flag));\n\t}\n\n\tfunction givenAnyReturnUint(uint response) override external {\n\t\t_givenAnyReturn(uintToBytes(response));\t\n\t}\n\n\tfunction givenAnyReturnAddress(address response) override external {\n\t\t_givenAnyReturn(uintToBytes(uint(uint160(response))));\n\t}\n\n\tfunction givenAnyRevert() override external {\n\t\tfallbackMockType = MockType.Revert;\n\t\tfallbackRevertMessage = \"\";\n\t}\n\n\tfunction givenAnyRevertWithMessage(string calldata message) override external {\n\t\tfallbackMockType = MockType.Revert;\n\t\tfallbackRevertMessage = message;\n\t}\n\n\tfunction givenAnyRunOutOfGas() override external {\n\t\tfallbackMockType = MockType.OutOfGas;\n\t}\n\n\tfunction _givenCalldataReturn(bytes memory call, bytes memory response) private  {\n\t\tcalldataMockTypes[call] = MockType.Return;\n\t\tcalldataExpectations[call] = response;\n\t\ttrackCalldataMock(call);\n\t}\n\n\tfunction givenCalldataReturn(bytes calldata call, bytes calldata response) override external  {\n\t\t_givenCalldataReturn(call, response);\n\t}\n\n\tfunction givenCalldataReturnBool(bytes calldata call, bool response) override external {\n\t\tuint flag = response ? 1 : 0;\n\t\t_givenCalldataReturn(call, uintToBytes(flag));\n\t}\n\n\tfunction givenCalldataReturnUint(bytes calldata call, uint response) override external {\n\t\t_givenCalldataReturn(call, uintToBytes(response));\n\t}\n\n\tfunction givenCalldataReturnAddress(bytes calldata call, address response) override external {\n\t\t_givenCalldataReturn(call, uintToBytes(uint(uint160(response))));\n\t}\n\n\tfunction givenCalldataReturnBytes32(bytes calldata call, bytes32 response) override external {\n\t\t_givenCalldataReturn(call, abi.encode(response));\n\t}\n\n\tfunction _givenMethodReturn(bytes memory call, bytes memory response) private {\n\t\tbytes4 method = bytesToBytes4(call);\n\t\tmethodIdMockTypes[method] = MockType.Return;\n\t\tmethodIdExpectations[method] = response;\n\t\ttrackMethodIdMock(method);\t\t\n\t}\n\n\tfunction givenMethodReturn(bytes calldata call, bytes calldata response) override external {\n\t\t_givenMethodReturn(call, response);\n\t}\n\n\tfunction givenMethodReturnBool(bytes calldata call, bool response) override external {\n\t\tuint flag = response ? 1 : 0;\n\t\t_givenMethodReturn(call, uintToBytes(flag));\n\t}\n\n\tfunction givenMethodReturnUint(bytes calldata call, uint response) override external {\n\t\t_givenMethodReturn(call, uintToBytes(response));\n\t}\n\n\tfunction givenMethodReturnAddress(bytes calldata call, address response) override external {\n\t\t_givenMethodReturn(call, uintToBytes(uint(uint160(response))));\n\t}\n\n\tfunction givenMethodReturnBytes32(bytes calldata call, bytes32 response) override external {\n\t\t_givenMethodReturn(call, abi.encode(response));\n\t}\n\n\tfunction givenCalldataRevert(bytes calldata call) override external {\n\t\tcalldataMockTypes[call] = MockType.Revert;\n\t\tcalldataRevertMessage[call] = \"\";\n\t\ttrackCalldataMock(call);\n\t}\n\n\tfunction givenMethodRevert(bytes calldata call) override external {\n\t\tbytes4 method = bytesToBytes4(call);\n\t\tmethodIdMockTypes[method] = MockType.Revert;\n\t\ttrackMethodIdMock(method);\t\t\n\t}\n\n\tfunction givenCalldataRevertWithMessage(bytes calldata call, string calldata message) override external {\n\t\tcalldataMockTypes[call] = MockType.Revert;\n\t\tcalldataRevertMessage[call] = message;\n\t\ttrackCalldataMock(call);\n\t}\n\n\tfunction givenMethodRevertWithMessage(bytes calldata call, string calldata message) override external {\n\t\tbytes4 method = bytesToBytes4(call);\n\t\tmethodIdMockTypes[method] = MockType.Revert;\n\t\tmethodIdRevertMessages[method] = message;\n\t\ttrackMethodIdMock(method);\t\t\n\t}\n\n\tfunction givenCalldataRunOutOfGas(bytes calldata call) override external {\n\t\tcalldataMockTypes[call] = MockType.OutOfGas;\n\t\ttrackCalldataMock(call);\n\t}\n\n\tfunction givenMethodRunOutOfGas(bytes calldata call) override external {\n\t\tbytes4 method = bytesToBytes4(call);\n\t\tmethodIdMockTypes[method] = MockType.OutOfGas;\n\t\ttrackMethodIdMock(method);\t\n\t}\n\n\tfunction invocationCount() override external view returns (uint) {\n\t\treturn invocations;\n\t}\n\n\tfunction invocationCountForMethod(bytes calldata call) override external view returns (uint) {\n\t\tbytes4 method = bytesToBytes4(call);\n\t\treturn methodIdInvocations[keccak256(abi.encodePacked(resetCount, method))];\n\t}\n\n\tfunction invocationCountForCalldata(bytes calldata call) override external view returns (uint) {\n\t\treturn calldataInvocations[keccak256(abi.encodePacked(resetCount, call))];\n\t}\n\n\tfunction reset() override external {\n\t\t// Reset all exact calldataMocks\n\t\tbytes memory nextMock = calldataMocks[MOCKS_LIST_START];\n\t\tbytes32 mockHash = keccak256(nextMock);\n\t\t// We cannot compary bytes\n\t\twhile(mockHash != MOCKS_LIST_END_HASH) {\n\t\t\t// Reset all mock maps\n\t\t\tcalldataMockTypes[nextMock] = MockType.Return;\n\t\t\tcalldataExpectations[nextMock] = hex\"\";\n\t\t\tcalldataRevertMessage[nextMock] = \"\";\n\t\t\t// Set next mock to remove\n\t\t\tnextMock = calldataMocks[mockHash];\n\t\t\t// Remove from linked list\n\t\t\tcalldataMocks[mockHash] = \"\";\n\t\t\t// Update mock hash\n\t\t\tmockHash = keccak256(nextMock);\n\t\t}\n\t\t// Clear list\n\t\tcalldataMocks[MOCKS_LIST_START] = MOCKS_LIST_END;\n\n\t\t// Reset all any calldataMocks\n\t\tbytes4 nextAnyMock = methodIdMocks[SENTINEL_ANY_MOCKS];\n\t\twhile(nextAnyMock != SENTINEL_ANY_MOCKS) {\n\t\t\tbytes4 currentAnyMock = nextAnyMock;\n\t\t\tmethodIdMockTypes[currentAnyMock] = MockType.Return;\n\t\t\tmethodIdExpectations[currentAnyMock] = hex\"\";\n\t\t\tmethodIdRevertMessages[currentAnyMock] = \"\";\n\t\t\tnextAnyMock = methodIdMocks[currentAnyMock];\n\t\t\t// Remove from linked list\n\t\t\tmethodIdMocks[currentAnyMock] = 0x0;\n\t\t}\n\t\t// Clear list\n\t\tmethodIdMocks[SENTINEL_ANY_MOCKS] = SENTINEL_ANY_MOCKS;\n\n\t\tfallbackExpectation = DEFAULT_FALLBACK_VALUE;\n\t\tfallbackMockType = MockType.Return;\n\t\tinvocations = 0;\n\t\tresetCount += 1;\n\t}\n\n\tfunction useAllGas() private {\n\t\twhile(true) {\n\t\t\tbool s;\n\t\t\tassembly {\n\t\t\t\t//expensive call to EC multiply contract\n\t\t\t\ts := call(sub(gas(), 2000), 6, 0, 0x0, 0xc0, 0x0, 0x60)\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction bytesToBytes4(bytes memory b) private pure returns (bytes4) {\n\t\tbytes4 out;\n\t\tfor (uint i = 0; i < 4; i++) {\n\t\t\tout |= bytes4(b[i] & 0xFF) >> (i * 8);\n\t\t}\n\t\treturn out;\n\t}\n\n\tfunction uintToBytes(uint256 x) private pure returns (bytes memory b) {\n\t\tb = new bytes(32);\n\t\tassembly { mstore(add(b, 32), x) }\n\t}\n\n\tfunction updateInvocationCount(bytes4 methodId, bytes memory originalMsgData) public {\n\t\trequire(msg.sender == address(this), \"Can only be called from the contract itself\");\n\t\tinvocations += 1;\n\t\tmethodIdInvocations[keccak256(abi.encodePacked(resetCount, methodId))] += 1;\n\t\tcalldataInvocations[keccak256(abi.encodePacked(resetCount, originalMsgData))] += 1;\n\t}\n\n\treceive() payable external {\n\t\tfallbackImpl();\n\t}\n\tfallback() payable external {\n\t\tfallbackImpl();\n\t}\n\n\tfunction fallbackImpl() internal {\n\t\tbytes4 methodId = msg.sig;\n\n\t\t// First, check exact matching overrides\n\t\tif (calldataMockTypes[msg.data] == MockType.Revert) {\n\t\t\trevert(calldataRevertMessage[msg.data]);\n\t\t}\n\t\tif (calldataMockTypes[msg.data] == MockType.OutOfGas) {\n\t\t\tuseAllGas();\n\t\t}\n\t\tbytes memory result = calldataExpectations[msg.data];\n\n\t\t// Then check method Id overrides\n\t\tif (result.length == 0) {\n\t\t\tif (methodIdMockTypes[methodId] == MockType.Revert) {\n\t\t\t\trevert(methodIdRevertMessages[methodId]);\n\t\t\t}\n\t\t\tif (methodIdMockTypes[methodId] == MockType.OutOfGas) {\n\t\t\t\tuseAllGas();\n\t\t\t}\n\t\t\tresult = methodIdExpectations[methodId];\n\t\t}\n\n\t\t// Last, use the fallback override\n\t\tif (result.length == 0) {\n\t\t\tif (fallbackMockType == MockType.Revert) {\n\t\t\t\trevert(fallbackRevertMessage);\n\t\t\t}\n\t\t\tif (fallbackMockType == MockType.OutOfGas) {\n\t\t\t\tuseAllGas();\n\t\t\t}\n\t\t\tresult = fallbackExpectation;\n\t\t}\n\n\t\t// Record invocation as separate call so we don't rollback in case we are called with STATICCALL\n\t\t(, bytes memory r) = address(this).call{gas: 100000}(abi.encodeWithSignature(\"updateInvocationCount(bytes4,bytes)\", methodId, msg.data));\n\t\tassert(r.length == 0);\n\t\t\n\t\tassembly {\n\t\t\treturn(add(0x20, result), mload(result))\n\t\t}\n\t}\n}\n"
    },
    "contracts/accessors/SimulateTxAccessor.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {Executor, Enum} from \"../base/Executor.sol\";\r\n\r\n/**\r\n * @title Simulate Transaction Accessor.\r\n * @notice Can be used with StorageAccessible to simulate Safe transactions.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract SimulateTxAccessor is Executor {\r\n    address private immutable ACCESSOR_SINGLETON;\r\n\r\n    constructor() {\r\n        ACCESSOR_SINGLETON = address(this);\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to make a function callable via delegatecall only.\r\n     * If the function is called via a regular call, it will revert.\r\n     */\r\n    modifier onlyDelegateCall() {\r\n        require(address(this) != ACCESSOR_SINGLETON, \"SimulateTxAccessor should only be called via delegatecall\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Simulates a Safe transaction and returns the used gas, success boolean and the return data.\r\n     * @dev Executes the specified operation {Call, DelegateCall} and returns operation-specific data.\r\n     *      Has to be called via delegatecall.\r\n     *      This returns the data equal to `abi.encode(uint256(estimate), bool(success), bytes(returnData))`.\r\n     *      Specifically, the returndata will be:\r\n     *      `estimate:uint256 || success:bool || returnData.length:uint256 || returnData:bytes`.\r\n     * @param to Destination address .\r\n     * @param value Native token value.\r\n     * @param data Data payload.\r\n     * @param operation Operation type {Call, DelegateCall}.\r\n     * @return estimate Gas used.\r\n     * @return success Success boolean value.\r\n     * @return returnData Return data.\r\n     */\r\n    function simulate(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Enum.Operation operation\r\n    ) external onlyDelegateCall returns (uint256 estimate, bool success, bytes memory returnData) {\r\n        uint256 startGas = gasleft();\r\n        success = execute(to, value, data, operation, gasleft());\r\n        estimate = startGas - gasleft();\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Load free memory location\r\n            let ptr := mload(0x40)\r\n            // We allocate memory for the return data by setting the free memory location to\r\n            // current free memory location + data size + 32 bytes for data size value\r\n            mstore(0x40, add(ptr, add(returndatasize(), 0x20)))\r\n            // Store the size\r\n            mstore(ptr, returndatasize())\r\n            // Store the data\r\n            returndatacopy(add(ptr, 0x20), 0, returndatasize())\r\n            // Point the return data to the correct memory location\r\n            returnData := ptr\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n}\r\n"
    },
    "contracts/base/Executor.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\nimport {Enum} from \"../libraries/Enum.sol\";\r\n\r\n/**\r\n * @title Executor - A contract that can execute transactions\r\n * @author Richard Meissner - @rmeissner\r\n */\r\nabstract contract Executor {\r\n    /**\r\n     * @notice Executes either a delegatecall or a call with provided parameters.\r\n     * @dev This method doesn't perform any sanity check of the transaction, such as:\r\n     *      - if the contract at `to` address has code or not\r\n     *      It is the responsibility of the caller to perform such checks.\r\n     * @param to Destination address.\r\n     * @param value Ether value.\r\n     * @param data Data payload.\r\n     * @param operation Operation type.\r\n     * @return success boolean flag indicating if the call succeeded.\r\n     */\r\n    function execute(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation,\r\n        uint256 txGas\r\n    ) internal returns (bool success) {\r\n        if (operation == Enum.Operation.DelegateCall) {\r\n            /* solhint-disable no-inline-assembly */\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                success := delegatecall(txGas, to, add(data, 0x20), mload(data), 0, 0)\r\n            }\r\n            /* solhint-enable no-inline-assembly */\r\n        } else {\r\n            /* solhint-disable no-inline-assembly */\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)\r\n            }\r\n            /* solhint-enable no-inline-assembly */\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/base/FallbackManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {SelfAuthorized} from \"../common/SelfAuthorized.sol\";\r\nimport {IFallbackManager} from \"../interfaces/IFallbackManager.sol\";\r\n\r\n/**\r\n * @title Fallback Manager - A contract managing fallback calls made to this contract\r\n * @author Richard Meissner - @rmeissner\r\n */\r\nabstract contract FallbackManager is SelfAuthorized, IFallbackManager {\r\n    // keccak256(\"fallback_manager.handler.address\")\r\n    bytes32 internal constant FALLBACK_HANDLER_STORAGE_SLOT = 0x6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5;\r\n\r\n    /**\r\n     *  @notice Internal function to set the fallback handler.\r\n     *  @param handler contract to handle fallback calls.\r\n     */\r\n    function internalSetFallbackHandler(address handler) internal {\r\n        /*\r\n            If a fallback handler is set to self, then the following attack vector is opened:\r\n            Imagine we have a function like this:\r\n            function withdraw() internal authorized {\r\n                withdrawalAddress.call.value(address(this).balance)(\"\");\r\n            }\r\n\r\n            If the fallback method is triggered, the fallback handler appends the msg.sender address to the calldata and calls the fallback handler.\r\n            A potential attacker could call a Safe with the 3 bytes signature of a withdraw function. Since 3 bytes do not create a valid signature,\r\n            the call would end in a fallback handler. Since it appends the msg.sender address to the calldata, the attacker could craft an address \r\n            where the first 3 bytes of the previous calldata + the first byte of the address make up a valid function signature. The subsequent call would result in unsanctioned access to Safe's internal protected methods.\r\n            For some reason, solidity matches the first 4 bytes of the calldata to a function signature, regardless if more data follow these 4 bytes.\r\n        */\r\n        if (handler == address(this)) revertWithError(\"GS400\");\r\n\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            sstore(FALLBACK_HANDLER_STORAGE_SLOT, handler)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IFallbackManager\r\n     */\r\n    function setFallbackHandler(address handler) public override authorized {\r\n        internalSetFallbackHandler(handler);\r\n        emit ChangedFallbackHandler(handler);\r\n    }\r\n\r\n    // @notice Forwards all calls to the fallback handler if set. Returns 0 if no handler is set.\r\n    // @dev Appends the non-padded caller address to the calldata to be optionally used in the handler\r\n    //      The handler can make us of `HandlerContext.sol` to extract the address.\r\n    //      This is done because in the next call frame the `msg.sender` will be FallbackManager's address\r\n    //      and having the original caller address may enable additional verification scenarios.\r\n    // solhint-disable-next-line payable-fallback,no-complex-fallback\r\n    fallback() external {\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // When compiled with the optimizer, the compiler relies on a certain assumptions on how the\r\n            // memory is used, therefore we need to guarantee memory safety (keeping the free memory point 0x40 slot intact,\r\n            // not going beyond the scratch space, etc)\r\n            // Solidity docs: https://docs.soliditylang.org/en/latest/assembly.html#memory-safety\r\n\r\n            let handler := sload(FALLBACK_HANDLER_STORAGE_SLOT)\r\n\r\n            if iszero(handler) {\r\n                return(0, 0)\r\n            }\r\n\r\n            let ptr := mload(0x40)\r\n            calldatacopy(ptr, 0, calldatasize())\r\n\r\n            // The msg.sender address is shifted to the left by 12 bytes to remove the padding\r\n            // Then the address without padding is stored right after the calldata\r\n            mstore(add(ptr, calldatasize()), shl(96, caller()))\r\n\r\n            // Add 20 bytes for the address appended add the end\r\n            let success := call(gas(), handler, 0, ptr, add(calldatasize(), 20), 0, 0)\r\n\r\n            returndatacopy(ptr, 0, returndatasize())\r\n            if iszero(success) {\r\n                revert(ptr, returndatasize())\r\n            }\r\n            return(ptr, returndatasize())\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n}\r\n"
    },
    "contracts/base/GuardManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n/* solhint-disable one-contract-per-file */\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {SelfAuthorized} from \"./../common/SelfAuthorized.sol\";\r\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\r\nimport {IGuardManager} from \"./../interfaces/IGuardManager.sol\";\r\nimport {Enum} from \"./../libraries/Enum.sol\";\r\n\r\n/**\r\n * @title ITransactionGuard Interface\r\n */\r\ninterface ITransactionGuard is IERC165 {\r\n    /**\r\n     * @notice Checks the transaction details.\r\n     * @dev The function needs to implement transaction validation logic.\r\n     * @param to The address to which the transaction is intended.\r\n     * @param value The value of the transaction in Wei.\r\n     * @param data The transaction data.\r\n     * @param operation The type of operation of the transaction.\r\n     * @param safeTxGas Gas used for the transaction.\r\n     * @param baseGas The base gas for the transaction.\r\n     * @param gasPrice The price of gas in Wei for the transaction.\r\n     * @param gasToken The token used to pay for gas.\r\n     * @param refundReceiver The address which should receive the refund.\r\n     * @param signatures The signatures of the transaction.\r\n     * @param msgSender The address of the message sender.\r\n     */\r\n    function checkTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address payable refundReceiver,\r\n        bytes memory signatures,\r\n        address msgSender\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Checks after execution of transaction.\r\n     * @dev The function needs to implement a check after the execution of the transaction.\r\n     * @param hash The hash of the transaction.\r\n     * @param success The status of the transaction execution.\r\n     */\r\n    function checkAfterExecution(bytes32 hash, bool success) external;\r\n}\r\n\r\nabstract contract BaseTransactionGuard is ITransactionGuard {\r\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\r\n        return\r\n            interfaceId == type(ITransactionGuard).interfaceId || // 0xe6d7a83a\r\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\r\n    }\r\n}\r\n\r\n/**\r\n * @title Guard Manager - A contract managing transaction guards which perform pre and post-checks on Safe transactions.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\nabstract contract GuardManager is SelfAuthorized, IGuardManager {\r\n    // keccak256(\"guard_manager.guard.address\")\r\n    bytes32 internal constant GUARD_STORAGE_SLOT = 0x4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8;\r\n\r\n    /**\r\n     * @inheritdoc IGuardManager\r\n     */\r\n    function setGuard(address guard) external override authorized {\r\n        if (guard != address(0) && !ITransactionGuard(guard).supportsInterface(type(ITransactionGuard).interfaceId))\r\n            revertWithError(\"GS300\");\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            sstore(GUARD_STORAGE_SLOT, guard)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n        emit ChangedGuard(guard);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal method to retrieve the current guard\r\n     *      We do not have a public method because we're short on bytecode size limit,\r\n     *      to retrieve the guard address, one can use `getStorageAt` from `StorageAccessible` contract\r\n     *      with the slot `GUARD_STORAGE_SLOT`\r\n     * @return guard The address of the guard\r\n     */\r\n    function getGuard() internal view returns (address guard) {\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            guard := sload(GUARD_STORAGE_SLOT)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n}\r\n"
    },
    "contracts/base/ModuleManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n/* solhint-disable one-contract-per-file */\r\npragma solidity >=0.7.0 <0.9.0;\r\nimport {SelfAuthorized} from \"./../common/SelfAuthorized.sol\";\r\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\r\nimport {IModuleManager} from \"./../interfaces/IModuleManager.sol\";\r\nimport {Enum} from \"./../libraries/Enum.sol\";\r\nimport {Executor} from \"./Executor.sol\";\r\n\r\n/**\r\n * @title IModuleGuard Interface\r\n */\r\ninterface IModuleGuard is IERC165 {\r\n    /**\r\n     * @notice Checks the module transaction details.\r\n     * @dev The function needs to implement module transaction validation logic.\r\n     * @param to The address to which the transaction is intended.\r\n     * @param value The value of the transaction in Wei.\r\n     * @param data The transaction data.\r\n     * @param operation The type of operation of the module transaction.\r\n     * @param module The module involved in the transaction.\r\n     * @return moduleTxHash The hash of the module transaction.\r\n     */\r\n    function checkModuleTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation,\r\n        address module\r\n    ) external returns (bytes32 moduleTxHash);\r\n\r\n    /**\r\n     * @notice Checks after execution of module transaction.\r\n     * @dev The function needs to implement a check after the execution of the module transaction.\r\n     * @param txHash The hash of the module transaction.\r\n     * @param success The status of the module transaction execution.\r\n     */\r\n    function checkAfterModuleExecution(bytes32 txHash, bool success) external;\r\n}\r\n\r\nabstract contract BaseModuleGuard is IModuleGuard {\r\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\r\n        return\r\n            interfaceId == type(IModuleGuard).interfaceId || // 0x58401ed8\r\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\r\n    }\r\n}\r\n\r\n/**\r\n * @title Module Manager - A contract managing Safe modules\r\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\r\n           ⚠️ WARNING: Modules are a security risk since they can execute arbitrary transactions, \r\n           so only trusted and audited modules should be added to a Safe. A malicious module can\r\n           completely takeover a Safe.\r\n * @author Stefan George - @Georgi87\r\n * @author Richard Meissner - @rmeissner\r\n */\r\nabstract contract ModuleManager is SelfAuthorized, Executor, IModuleManager {\r\n    // SENTINEL_MODULES is used to traverse `modules`, so that:\r\n    //      1. `modules[SENTINEL_MODULES]` contains the first module\r\n    //      2. `modules[last_module]` points back to SENTINEL_MODULES\r\n    address internal constant SENTINEL_MODULES = address(0x1);\r\n\r\n    // keccak256(\"module_manager.module_guard.address\")\r\n    bytes32 internal constant MODULE_GUARD_STORAGE_SLOT = 0xb104e0b93118902c651344349b610029d694cfdec91c589c91ebafbcd0289947;\r\n\r\n    mapping(address => address) internal modules;\r\n\r\n    /**\r\n     * @notice Setup function sets the initial storage of the contract.\r\n     *         Optionally executes a delegate call to another contract to setup the modules.\r\n     * @param to Optional destination address of call to execute.\r\n     * @param data Optional data of call to execute.\r\n     */\r\n    function setupModules(address to, bytes memory data) internal {\r\n        if (modules[SENTINEL_MODULES] != address(0)) revertWithError(\"GS100\");\r\n        modules[SENTINEL_MODULES] = SENTINEL_MODULES;\r\n        if (to != address(0)) {\r\n            if (!isContract(to)) revertWithError(\"GS002\");\r\n            // Setup has to complete successfully or transaction fails.\r\n            if (!execute(to, 0, data, Enum.Operation.DelegateCall, type(uint256).max)) revertWithError(\"GS000\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Runs pre-execution checks for module transactions if a guard is enabled.\r\n     * @param to Target address of module transaction.\r\n     * @param value Ether value of module transaction.\r\n     * @param data Data payload of module transaction.\r\n     * @param operation Operation type of module transaction.\r\n     * @return guard Guard to be used for checking.\r\n     * @return guardHash Hash returned from the guard tx check.\r\n     */\r\n    function preModuleExecution(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) internal returns (address guard, bytes32 guardHash) {\r\n        onBeforeExecTransactionFromModule(to, value, data, operation);\r\n        guard = getModuleGuard();\r\n\r\n        // Only whitelisted modules are allowed.\r\n        require(msg.sender != SENTINEL_MODULES && modules[msg.sender] != address(0), \"GS104\");\r\n\r\n        if (guard != address(0)) {\r\n            guardHash = IModuleGuard(guard).checkModuleTransaction(to, value, data, operation, msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Runs post-execution checks for module transactions if a guard is enabled.\r\n     * @param guardHash Hash returned from the guard during pre execution check.\r\n     * @param success Boolean flag indicating if the call succeeded.\r\n     * @param guard Guard to be used for checking.\r\n     * @dev Emits event based on module transaction success.\r\n     */\r\n    function postModuleExecution(address guard, bytes32 guardHash, bool success) internal {\r\n        if (guard != address(0)) {\r\n            IModuleGuard(guard).checkAfterModuleExecution(guardHash, success);\r\n        }\r\n        if (success) emit ExecutionFromModuleSuccess(msg.sender);\r\n        else emit ExecutionFromModuleFailure(msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IModuleManager\r\n     */\r\n    function enableModule(address module) public override authorized {\r\n        // Module address cannot be null or sentinel.\r\n        if (module == address(0) || module == SENTINEL_MODULES) revertWithError(\"GS101\");\r\n        // Module cannot be added twice.\r\n        if (modules[module] != address(0)) revertWithError(\"GS102\");\r\n        modules[module] = modules[SENTINEL_MODULES];\r\n        modules[SENTINEL_MODULES] = module;\r\n        emit EnabledModule(module);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IModuleManager\r\n     */\r\n    function disableModule(address prevModule, address module) public override authorized {\r\n        // Validate module address and check that it corresponds to module index.\r\n        if (module == address(0) || module == SENTINEL_MODULES) revertWithError(\"GS101\");\r\n        if (modules[prevModule] != module) revertWithError(\"GS103\");\r\n        modules[prevModule] = modules[module];\r\n        modules[module] = address(0);\r\n        emit DisabledModule(module);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IModuleManager\r\n     */\r\n    function execTransactionFromModule(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) external override returns (bool success) {\r\n        (address guard, bytes32 guardHash) = preModuleExecution(to, value, data, operation);\r\n        success = execute(to, value, data, operation, type(uint256).max);\r\n        postModuleExecution(guard, guardHash, success);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IModuleManager\r\n     */\r\n    function execTransactionFromModuleReturnData(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) external override returns (bool success, bytes memory returnData) {\r\n        (address guard, bytes32 guardHash) = preModuleExecution(to, value, data, operation);\r\n        success = execute(to, value, data, operation, type(uint256).max);\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Load free memory location\r\n            returnData := mload(0x40)\r\n            // We allocate memory for the return data by setting the free memory location to\r\n            // current free memory location + data size + 32 bytes for data size value\r\n            mstore(0x40, add(returnData, add(returndatasize(), 0x20)))\r\n            // Store the size\r\n            mstore(returnData, returndatasize())\r\n            // Store the data\r\n            returndatacopy(add(returnData, 0x20), 0, returndatasize())\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n        postModuleExecution(guard, guardHash, success);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IModuleManager\r\n     */\r\n    function isModuleEnabled(address module) public view override returns (bool) {\r\n        return SENTINEL_MODULES != module && modules[module] != address(0);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IModuleManager\r\n     */\r\n    function getModulesPaginated(address start, uint256 pageSize) external view override returns (address[] memory array, address next) {\r\n        if (start != SENTINEL_MODULES && !isModuleEnabled(start)) revertWithError(\"GS105\");\r\n        if (pageSize == 0) revertWithError(\"GS106\");\r\n        // Init array with max page size\r\n        array = new address[](pageSize);\r\n\r\n        // Populate return array\r\n        uint256 moduleCount = 0;\r\n        next = modules[start];\r\n        while (next != address(0) && next != SENTINEL_MODULES && moduleCount < pageSize) {\r\n            array[moduleCount] = next;\r\n            next = modules[next];\r\n            moduleCount++;\r\n        }\r\n\r\n        /**\r\n          Because of the argument validation, we can assume that the loop will always iterate over the valid module list values\r\n          and the `next` variable will either be an enabled module or a sentinel address (signalling the end). \r\n          \r\n          If we haven't reached the end inside the loop, we need to set the next pointer to the last element of the modules array\r\n          because the `next` variable (which is a module by itself) acting as a pointer to the start of the next page is neither \r\n          included to the current page, nor will it be included in the next one if you pass it as a start.\r\n        */\r\n        if (next != SENTINEL_MODULES) {\r\n            next = array[moduleCount - 1];\r\n        }\r\n        // Set correct size of returned array\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            mstore(array, moduleCount)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is a contract.\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     *      as the code is not actually created until after the constructor finishes.\r\n     * @param account The address being queried\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IModuleManager\r\n     */\r\n    function setModuleGuard(address moduleGuard) external override authorized {\r\n        if (moduleGuard != address(0) && !IModuleGuard(moduleGuard).supportsInterface(type(IModuleGuard).interfaceId))\r\n            revertWithError(\"GS301\");\r\n\r\n        bytes32 slot = MODULE_GUARD_STORAGE_SLOT;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            sstore(slot, moduleGuard)\r\n        }\r\n        emit ChangedModuleGuard(moduleGuard);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal method to retrieve the current module guard\r\n     * @return moduleGuard The address of the guard\r\n     */\r\n    function getModuleGuard() internal view returns (address moduleGuard) {\r\n        bytes32 slot = MODULE_GUARD_STORAGE_SLOT;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            moduleGuard := sload(slot)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice A hook that gets called before execution of {execTransactionFromModule*} methods.\r\n     * @param to Destination address of module transaction.\r\n     * @param value Ether value of module transaction.\r\n     * @param data Data payload of module transaction.\r\n     * @param operation Operation type of module transaction.\r\n     */\r\n    function onBeforeExecTransactionFromModule(address to, uint256 value, bytes memory data, Enum.Operation operation) internal virtual {}\r\n}\r\n"
    },
    "contracts/base/OwnerManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\nimport {SelfAuthorized} from \"../common/SelfAuthorized.sol\";\r\nimport {IOwnerManager} from \"../interfaces/IOwnerManager.sol\";\r\n\r\n/**\r\n * @title OwnerManager - Manages Safe owners and a threshold to authorize transactions.\r\n * @dev Uses a linked list to store the owners because the code generate by the solidity compiler\r\n *      is more efficient than using a dynamic array.\r\n * @author Stefan George - @Georgi87\r\n * @author Richard Meissner - @rmeissner\r\n */\r\nabstract contract OwnerManager is SelfAuthorized, IOwnerManager {\r\n    // SENTINEL_OWNERS is used to traverse `owners`, so that:\r\n    //      1. `owners[SENTINEL_OWNERS]` contains the first owner\r\n    //      2. `owners[last_owner]` points back to SENTINEL_OWNERS\r\n    address internal constant SENTINEL_OWNERS = address(0x1);\r\n\r\n    mapping(address => address) internal owners;\r\n    uint256 internal ownerCount;\r\n    uint256 internal threshold;\r\n\r\n    /**\r\n     * @notice Sets the initial storage of the contract.\r\n     * @param _owners List of Safe owners.\r\n     * @param _threshold Number of required confirmations for a Safe transaction.\r\n     */\r\n    function setupOwners(address[] memory _owners, uint256 _threshold) internal {\r\n        // Threshold can only be 0 at initialization.\r\n        // Check ensures that setup function can only be called once.\r\n        if (threshold > 0) revertWithError(\"GS200\");\r\n        // Validate that threshold is smaller than number of added owners.\r\n        if (_threshold > _owners.length) revertWithError(\"GS201\");\r\n        // There has to be at least one Safe owner.\r\n        if (_threshold == 0) revertWithError(\"GS202\");\r\n        // Initializing Safe owners.\r\n        address currentOwner = SENTINEL_OWNERS;\r\n        for (uint256 i = 0; i < _owners.length; i++) {\r\n            // Owner address cannot be null.\r\n            address owner = _owners[i];\r\n            if (owner == address(0) || owner == SENTINEL_OWNERS || owner == address(this) || currentOwner == owner)\r\n                revertWithError(\"GS203\");\r\n            // No duplicate owners allowed.\r\n            if (owners[owner] != address(0)) revertWithError(\"GS204\");\r\n            owners[currentOwner] = owner;\r\n            currentOwner = owner;\r\n        }\r\n        owners[currentOwner] = SENTINEL_OWNERS;\r\n        ownerCount = _owners.length;\r\n        threshold = _threshold;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IOwnerManager\r\n     */\r\n    function addOwnerWithThreshold(address owner, uint256 _threshold) public override authorized {\r\n        // Owner address cannot be null, the sentinel or the Safe itself.\r\n        if (owner == address(0) || owner == SENTINEL_OWNERS || owner == address(this)) revertWithError(\"GS203\");\r\n        // No duplicate owners allowed.\r\n        if (owners[owner] != address(0)) revertWithError(\"GS204\");\r\n        owners[owner] = owners[SENTINEL_OWNERS];\r\n        owners[SENTINEL_OWNERS] = owner;\r\n        ownerCount++;\r\n        emit AddedOwner(owner);\r\n        // Change threshold if threshold was changed.\r\n        if (threshold != _threshold) changeThreshold(_threshold);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IOwnerManager\r\n     */\r\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) public override authorized {\r\n        // Only allow to remove an owner, if threshold can still be reached.\r\n        if (ownerCount - 1 < _threshold) revertWithError(\"GS201\");\r\n        // Validate owner address and check that it corresponds to owner index.\r\n        if (owner == address(0) || owner == SENTINEL_OWNERS) revertWithError(\"GS203\");\r\n        if (owners[prevOwner] != owner) revertWithError(\"GS205\");\r\n        owners[prevOwner] = owners[owner];\r\n        owners[owner] = address(0);\r\n        ownerCount--;\r\n        emit RemovedOwner(owner);\r\n        // Change threshold if threshold was changed.\r\n        if (threshold != _threshold) changeThreshold(_threshold);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IOwnerManager\r\n     */\r\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) public override authorized {\r\n        // Owner address cannot be null, the sentinel or the Safe itself.\r\n        if (newOwner == address(0) || newOwner == SENTINEL_OWNERS || newOwner == address(this)) revertWithError(\"GS203\");\r\n        // No duplicate owners allowed.\r\n        if (owners[newOwner] != address(0)) revertWithError(\"GS204\");\r\n        // Validate oldOwner address and check that it corresponds to owner index.\r\n        if (oldOwner == address(0) || oldOwner == SENTINEL_OWNERS) revertWithError(\"GS203\");\r\n        if (owners[prevOwner] != oldOwner) revertWithError(\"GS205\");\r\n        owners[newOwner] = owners[oldOwner];\r\n        owners[prevOwner] = newOwner;\r\n        owners[oldOwner] = address(0);\r\n        emit RemovedOwner(oldOwner);\r\n        emit AddedOwner(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IOwnerManager\r\n     */\r\n    function changeThreshold(uint256 _threshold) public override authorized {\r\n        // Validate that threshold is smaller than number of owners.\r\n        if (_threshold > ownerCount) revertWithError(\"GS201\");\r\n        // There has to be at least one Safe owner.\r\n        if (_threshold == 0) revertWithError(\"GS202\");\r\n        threshold = _threshold;\r\n        emit ChangedThreshold(threshold);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IOwnerManager\r\n     */\r\n    function getThreshold() public view override returns (uint256) {\r\n        return threshold;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IOwnerManager\r\n     */\r\n    function isOwner(address owner) public view override returns (bool) {\r\n        return !(owner == SENTINEL_OWNERS || owners[owner] == address(0));\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc IOwnerManager\r\n     */\r\n    function getOwners() public view override returns (address[] memory) {\r\n        address[] memory array = new address[](ownerCount);\r\n\r\n        // populate return array\r\n        uint256 index = 0;\r\n        address currentOwner = owners[SENTINEL_OWNERS];\r\n        while (currentOwner != SENTINEL_OWNERS) {\r\n            array[index] = currentOwner;\r\n            currentOwner = owners[currentOwner];\r\n            index++;\r\n        }\r\n        return array;\r\n    }\r\n}\r\n"
    },
    "contracts/common/NativeCurrencyPaymentFallback.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title NativeCurrencyPaymentFallback - A contract that has a fallback to accept native currency payments.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\nabstract contract NativeCurrencyPaymentFallback {\r\n    event SafeReceived(address indexed sender, uint256 value);\r\n\r\n    /**\r\n     * @notice Receive function accepts native currency transactions.\r\n     * @dev Emits an event with sender and received value.\r\n     */\r\n    receive() external payable {\r\n        emit SafeReceived(msg.sender, msg.value);\r\n    }\r\n}\r\n"
    },
    "contracts/common/SecuredTokenTransfer.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title SecuredTokenTransfer - Secure token transfer.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\nabstract contract SecuredTokenTransfer {\r\n    /**\r\n     * @notice Transfers a token and returns a boolean if it was a success\r\n     * @dev It checks the return data of the transfer call and returns true if the transfer was successful.\r\n     *      It doesn't check if the `token` address is a contract or not.\r\n     * @param token Token that should be transferred\r\n     * @param receiver Receiver to whom the token should be transferred\r\n     * @param amount The amount of tokens that should be transferred\r\n     * @return transferred Returns true if the transfer was successful\r\n     */\r\n    function transferToken(address token, address receiver, uint256 amount) internal returns (bool transferred) {\r\n        // 0xa9059cbb - keccack(\"transfer(address,uint256)\")\r\n        bytes memory data = abi.encodeWithSelector(0xa9059cbb, receiver, amount);\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // We write the return value to scratch space.\r\n            // See https://docs.soliditylang.org/en/v0.7.6/internals/layout_in_memory.html#layout-in-memory\r\n            let success := call(sub(gas(), 10000), token, 0, add(data, 0x20), mload(data), 0, 0x20)\r\n            switch returndatasize()\r\n            case 0 {\r\n                transferred := success\r\n            }\r\n            case 0x20 {\r\n                transferred := iszero(or(iszero(success), iszero(mload(0))))\r\n            }\r\n            default {\r\n                transferred := 0\r\n            }\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n}\r\n"
    },
    "contracts/common/SelfAuthorized.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {ErrorMessage} from \"../libraries/ErrorMessage.sol\";\r\n\r\n/**\r\n * @title SelfAuthorized - Authorizes current contract to perform actions to itself.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\nabstract contract SelfAuthorized is ErrorMessage {\r\n    function requireSelfCall() private view {\r\n        if (msg.sender != address(this)) revertWithError(\"GS031\");\r\n    }\r\n\r\n    modifier authorized() {\r\n        // Modifiers are copied around during compilation. This is a function call as it minimized the bytecode size\r\n        requireSelfCall();\r\n        _;\r\n    }\r\n}\r\n"
    },
    "contracts/common/SignatureDecoder.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title SignatureDecoder - Decodes signatures encoded as bytes\r\n * @author Richard Meissner - @rmeissner\r\n */\r\nabstract contract SignatureDecoder {\r\n    /**\r\n     * @notice Splits signature bytes into `uint8 v, bytes32 r, bytes32 s`.\r\n     * @dev Make sure to perform a bounds check for @param pos, to avoid out of bounds access on @param signatures\r\n     *      The signature format is a compact form of {bytes32 r}{bytes32 s}{uint8 v}\r\n     *      Compact means uint8 is not padded to 32 bytes.\r\n     * @param pos Which signature to read.\r\n     *            A prior bounds check of this parameter should be performed, to avoid out of bounds access.\r\n     * @param signatures Concatenated {r, s, v} signatures.\r\n     * @return v Recovery ID or Safe signature type.\r\n     * @return r Output value r of the signature.\r\n     * @return s Output value s of the signature.\r\n     */\r\n    function signatureSplit(bytes memory signatures, uint256 pos) internal pure returns (uint8 v, bytes32 r, bytes32 s) {\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let signaturePos := mul(0x41, pos)\r\n            r := mload(add(signatures, add(signaturePos, 0x20)))\r\n            s := mload(add(signatures, add(signaturePos, 0x40)))\r\n            v := byte(0, mload(add(signatures, add(signaturePos, 0x60))))\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n}\r\n"
    },
    "contracts/common/Singleton.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title Singleton - Base for singleton contracts (should always be the first super contract)\r\n *        This contract is tightly coupled to our proxy contract (see `proxies/SafeProxy.sol`)\r\n * @author Richard Meissner - @rmeissner\r\n */\r\nabstract contract Singleton {\r\n    // singleton always has to be the first declared variable to ensure the same location as in the Proxy contract.\r\n    // It should also always be ensured the address is stored alone (uses a full word)\r\n    address private singleton;\r\n}\r\n"
    },
    "contracts/common/StorageAccessible.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title StorageAccessible - A generic base contract that allows callers to access all internal storage.\r\n * @notice See https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\r\n *         It removes a method from the original contract not needed for the Safe Smart Account contracts.\r\n * @author Gnosis Developers\r\n */\r\nabstract contract StorageAccessible {\r\n    /**\r\n     * @notice Reads `length` bytes of storage in the currents contract\r\n     * @param offset - the offset in the current contract's storage in words to start reading from\r\n     * @param length - the number of words (32 bytes) of data to read\r\n     * @return the bytes that were read.\r\n     */\r\n    function getStorageAt(uint256 offset, uint256 length) public view returns (bytes memory) {\r\n        bytes memory result = new bytes(length * 32);\r\n        for (uint256 index = 0; index < length; index++) {\r\n            /* solhint-disable no-inline-assembly */\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let word := sload(add(offset, index))\r\n                mstore(add(add(result, 0x20), mul(index, 0x20)), word)\r\n            }\r\n            /* solhint-enable no-inline-assembly */\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a delegatecall on a targetContract in the context of self.\r\n     * Internally reverts execution to avoid side effects (making it static).\r\n     *\r\n     * This method reverts with data equal to `abi.encode(bool(success), bytes(response))`.\r\n     * Specifically, the `returndata` after a call to this method will be:\r\n     * `success:bool || response.length:uint256 || response:bytes`.\r\n     *\r\n     * @param targetContract Address of the contract containing the code to execute.\r\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\r\n     */\r\n    function simulateAndRevert(address targetContract, bytes memory calldataPayload) external {\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let success := delegatecall(gas(), targetContract, add(calldataPayload, 0x20), mload(calldataPayload), 0, 0)\r\n            // Load free memory location\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, success)\r\n            mstore(add(ptr, 0x20), returndatasize())\r\n            returndatacopy(add(ptr, 0x40), 0, returndatasize())\r\n            revert(ptr, add(returndatasize(), 0x40))\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n}\r\n"
    },
    "contracts/examples/guards/BaseGuard.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\nimport {BaseTransactionGuard, ITransactionGuard} from \"./../../base/GuardManager.sol\";\r\nimport {BaseModuleGuard, IModuleGuard} from \"./../../base/ModuleManager.sol\";\r\nimport {IERC165} from \"./../../interfaces/IERC165.sol\";\r\n\r\n/**\r\n * @title BaseGuard - Inherits BaseTransactionGuard and BaseModuleGuard.\r\n */\r\nabstract contract BaseGuard is BaseTransactionGuard, BaseModuleGuard {\r\n    /**\r\n     * @inheritdoc IERC165\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view virtual override(BaseTransactionGuard, BaseModuleGuard) returns (bool) {\r\n        return\r\n            interfaceId == type(ITransactionGuard).interfaceId || // 0xe6d7a83a\r\n            interfaceId == type(IModuleGuard).interfaceId || // 0x58401ed8\r\n            interfaceId == type(IERC165).interfaceId; // 0x01ffc9a7\r\n    }\r\n}\r\n"
    },
    "contracts/examples/guards/DebugTransactionGuard.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {ISafe} from \"./../../interfaces/ISafe.sol\";\r\nimport {Enum} from \"./../../libraries/Enum.sol\";\r\nimport {BaseGuard} from \"./BaseGuard.sol\";\r\n\r\n/**\r\n * @title Debug Transaction Guard - Emits transaction events with extended information.\r\n * @dev This guard is only meant as a development tool and example\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract DebugTransactionGuard is BaseGuard {\r\n    // solhint-disable-next-line payable-fallback\r\n    fallback() external {\r\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\r\n        // E.g. The expected check method might change and then the Safe would be locked.\r\n    }\r\n\r\n    event TransactionDetails(\r\n        address indexed safe,\r\n        bytes32 indexed txHash,\r\n        address to,\r\n        uint256 value,\r\n        bytes data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        bool usesRefund,\r\n        uint256 nonce,\r\n        bytes signatures,\r\n        address executor\r\n    );\r\n\r\n    event ModuleTransactionDetails(bytes32 indexed txHash, address to, uint256 value, bytes data, Enum.Operation operation, address module);\r\n\r\n    event GasUsage(address indexed safe, bytes32 indexed txHash, uint256 indexed nonce, bool success);\r\n\r\n    mapping(bytes32 => uint256) public txNonces;\r\n\r\n    /**\r\n     * @notice Called by the Safe contract before a transaction is executed.\r\n     * @param to Destination address of Safe transaction.\r\n     * @param value Ether value of Safe transaction.\r\n     * @param data Data payload of Safe transaction.\r\n     * @param operation Operation type of Safe transaction.\r\n     * @param safeTxGas Gas that should be used for the Safe transaction.\r\n     * @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund)\r\n     * @param gasPrice Gas price that should be used for the payment calculation.\r\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\r\n     * @param signatures Signature data that should be verified. Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\r\n     * @param executor Account executing the transaction.\r\n     */\r\n    function checkTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        // solhint-disable-next-line no-unused-vars\r\n        address payable refundReceiver,\r\n        bytes memory signatures,\r\n        address executor\r\n    ) external override {\r\n        uint256 nonce;\r\n        bytes32 txHash;\r\n        {\r\n            ISafe safe = ISafe(payable(msg.sender));\r\n            nonce = safe.nonce() - 1;\r\n            txHash = safe.getTransactionHash(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, nonce);\r\n        }\r\n        emit TransactionDetails(msg.sender, txHash, to, value, data, operation, safeTxGas, gasPrice > 0, nonce, signatures, executor);\r\n        txNonces[txHash] = nonce;\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the Safe contract after a transaction is executed.\r\n     * @param txHash Hash of the executed transaction.\r\n     * @param success True if the transaction was successful.\r\n     */\r\n    function checkAfterExecution(bytes32 txHash, bool success) external override {\r\n        uint256 nonce = txNonces[txHash];\r\n        require(nonce != 0, \"Could not get nonce\");\r\n        txNonces[txHash] = 0;\r\n        emit GasUsage(msg.sender, txHash, nonce, success);\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the Safe contract before a transaction is executed via a module.\r\n     * @param to Destination address of Safe transaction.\r\n     * @param value Ether value of Safe transaction.\r\n     * @param data Data payload of Safe transaction.\r\n     * @param operation Operation type of Safe transaction.\r\n     * @param module Account executing the transaction.\r\n     * @return moduleTxHash Hash of the module transaction.\r\n     */\r\n    function checkModuleTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation,\r\n        address module\r\n    ) external override returns (bytes32 moduleTxHash) {\r\n        moduleTxHash = keccak256(abi.encodePacked(to, value, data, operation, module));\r\n\r\n        emit ModuleTransactionDetails(moduleTxHash, to, value, data, operation, module);\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the Safe contract after a module transaction is executed.\r\n     * @dev No-op.\r\n     */\r\n    function checkAfterModuleExecution(bytes32 txHash, bool success) external override {}\r\n}\r\n"
    },
    "contracts/examples/guards/DelegateCallTransactionGuard.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {Enum} from \"../../libraries/Enum.sol\";\r\nimport {BaseGuard} from \"./BaseGuard.sol\";\r\n\r\n/**\r\n * @title DelegateCallTransactionGuard - Limits delegate calls to a specific target.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract DelegateCallTransactionGuard is BaseGuard {\r\n    address public immutable ALLOWED_TARGET;\r\n\r\n    constructor(address target) {\r\n        ALLOWED_TARGET = target;\r\n    }\r\n\r\n    // solhint-disable-next-line payable-fallback\r\n    fallback() external {\r\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\r\n        // E.g. The expected check method might change and then the Safe would be locked.\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the Safe contract before a transaction is executed.\r\n     * @dev Reverts if the transaction is a delegate call to contract other than the allowed one.\r\n     * @param to Destination address of Safe transaction.\r\n     * @param operation Operation type of Safe transaction.\r\n     */\r\n    function checkTransaction(\r\n        address to,\r\n        uint256,\r\n        bytes memory,\r\n        Enum.Operation operation,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        address,\r\n        // solhint-disable-next-line no-unused-vars\r\n        address payable,\r\n        bytes memory,\r\n        address\r\n    ) external view override {\r\n        require(operation != Enum.Operation.DelegateCall || to == ALLOWED_TARGET, \"This call is restricted\");\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the Safe contract after a transaction is executed.\r\n     * @dev No-op.\r\n     */\r\n    function checkAfterExecution(bytes32, bool) external view override {}\r\n\r\n    /**\r\n     * @notice Called by the Safe contract before a transaction is executed via a module.\r\n     * @param to Destination address of Safe transaction.\r\n     * @param value Ether value of Safe transaction.\r\n     * @param data Data payload of Safe transaction.\r\n     * @param operation Operation type of Safe transaction.\r\n     * @param module Module executing the transaction.\r\n     */\r\n    function checkModuleTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation,\r\n        address module\r\n    ) external view override returns (bytes32 moduleTxHash) {\r\n        require(operation != Enum.Operation.DelegateCall || to == ALLOWED_TARGET, \"This call is restricted\");\r\n        moduleTxHash = keccak256(abi.encodePacked(to, value, data, operation, module));\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the Safe contract after a module transaction is executed.\r\n     * @dev No-op.\r\n     */\r\n    function checkAfterModuleExecution(bytes32, bool) external view override {}\r\n}\r\n"
    },
    "contracts/examples/guards/OnlyOwnersGuard.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n/* solhint-disable one-contract-per-file */\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {BaseTransactionGuard} from \"./../../base/GuardManager.sol\";\r\nimport {ISafe} from \"./../../interfaces/ISafe.sol\";\r\nimport {Enum} from \"./../../libraries/Enum.sol\";\r\n\r\n/**\r\n * @title OnlyOwnersGuard - Only allows owners to execute transactions.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract OnlyOwnersGuard is BaseTransactionGuard {\r\n    constructor() {}\r\n\r\n    // solhint-disable-next-line payable-fallback\r\n    fallback() external {\r\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\r\n        // E.g. The expected check method might change and then the Safe would be locked.\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the Safe contract before a transaction is executed.\r\n     * @dev Reverts if the transaction is not executed by an owner.\r\n     * @param msgSender Executor of the transaction.\r\n     */\r\n    function checkTransaction(\r\n        address,\r\n        uint256,\r\n        bytes memory,\r\n        Enum.Operation,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        address,\r\n        // solhint-disable-next-line no-unused-vars\r\n        address payable,\r\n        bytes memory,\r\n        address msgSender\r\n    ) external view override {\r\n        require(ISafe(msg.sender).isOwner(msgSender), \"msg sender is not allowed to exec\");\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the Safe contract after a transaction is executed.\r\n     * @dev No-op.\r\n     */\r\n    function checkAfterExecution(bytes32, bool) external view override {}\r\n}\r\n"
    },
    "contracts/examples/guards/ReentrancyTransactionGuard.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {Enum} from \"../../libraries/Enum.sol\";\r\nimport {BaseGuard} from \"./BaseGuard.sol\";\r\n\r\n/**\r\n * @title ReentrancyTransactionGuard - Prevents reentrancy into the transaction execution function.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract ReentrancyTransactionGuard is BaseGuard {\r\n    bytes32 internal constant GUARD_STORAGE_SLOT = keccak256(\"reentrancy_guard.guard.struct\");\r\n\r\n    struct GuardValue {\r\n        bool active;\r\n    }\r\n\r\n    // solhint-disable-next-line payable-fallback\r\n    fallback() external {\r\n        // We don't revert on fallback to avoid issues in case of a Safe upgrade\r\n        // E.g. The expected check method might change and then the Safe would be locked.\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the guard value for the current context.\r\n     * @dev The guard value is stored in a slot that is unique to the contract instance and the function in which it is called.\r\n     * @return guard The guard value.\r\n     */\r\n    function getGuard() internal pure returns (GuardValue storage guard) {\r\n        bytes32 slot = GUARD_STORAGE_SLOT;\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            guard.slot := slot\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the Safe contract before a transaction is executed.\r\n     * @dev Reverts if reentrancy is detected.\r\n     */\r\n    function checkTransaction(\r\n        address,\r\n        uint256,\r\n        bytes memory,\r\n        Enum.Operation,\r\n        uint256,\r\n        uint256,\r\n        uint256,\r\n        address,\r\n        // solhint-disable-next-line no-unused-vars\r\n        address payable,\r\n        bytes memory,\r\n        address\r\n    ) external override {\r\n        GuardValue storage guard = getGuard();\r\n        require(!guard.active, \"Reentrancy detected\");\r\n        guard.active = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the Safe contract after a transaction is executed.\r\n     * @dev Resets the guard value.\r\n     */\r\n    function checkAfterExecution(bytes32, bool) external override {\r\n        getGuard().active = false;\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the Safe contract before a transaction is executed via a module.\r\n     * @param to Destination address of Safe transaction.\r\n     * @param value Ether value of Safe transaction.\r\n     * @param data Data payload of Safe transaction.\r\n     * @param operation Operation type of Safe transaction.\r\n     * @param module Account executing the transaction.\r\n     */\r\n    function checkModuleTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation,\r\n        address module\r\n    ) external override returns (bytes32 moduleTxHash) {\r\n        moduleTxHash = keccak256(abi.encodePacked(to, value, data, operation, module));\r\n\r\n        GuardValue storage guard = getGuard();\r\n        require(!guard.active, \"Reentrancy detected\");\r\n        guard.active = true;\r\n    }\r\n\r\n    /**\r\n     * @notice Called by the Safe contract after a module transaction is executed.\r\n     * @dev Resets the guard value.\r\n     */\r\n    function checkAfterModuleExecution(bytes32, bool) external override {\r\n        getGuard().active = false;\r\n    }\r\n}\r\n"
    },
    "contracts/examples/libraries/Migrate_1_3_0_to_1_2_0.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\nimport {SafeStorage} from \"../../libraries/SafeStorage.sol\";\r\n\r\n/**\r\n * @title Migration - Migrates a Safe contract from 1.3.0 to 1.2.0\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract Migration is SafeStorage {\r\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x035aff83d86937d35b32e04f0ddc6ff469290eef2f1b692d8a815c89404d4749;\r\n\r\n    address public immutable MIGRATION_SINGLETON;\r\n    address public immutable SAFE_120_SINGLETON;\r\n\r\n    constructor(address targetSingleton) {\r\n        // Singleton address cannot be zero address.\r\n        require(targetSingleton != address(0), \"Invalid singleton address provided\");\r\n        SAFE_120_SINGLETON = targetSingleton;\r\n        MIGRATION_SINGLETON = address(this);\r\n    }\r\n\r\n    event ChangedMasterCopy(address singleton);\r\n\r\n    /**\r\n     * @notice Migrates the Safe to the Singleton contract at `migrationSingleton`.\r\n     * @dev This can only be called via a delegatecall.\r\n     */\r\n    function migrate() public {\r\n        require(address(this) != MIGRATION_SINGLETON, \"Migration should only be called via delegatecall\");\r\n\r\n        singleton = SAFE_120_SINGLETON;\r\n        _deprecatedDomainSeparator = keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, this));\r\n        emit ChangedMasterCopy(singleton);\r\n    }\r\n}\r\n"
    },
    "contracts/external/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title SafeMath\r\n * @notice Math operations with safety checks that revert on error (overflow/underflow)\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @notice Multiplies two numbers, reverts on overflow.\r\n     * @param a First number\r\n     * @param b Second number\r\n     * @return Product of a and b\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @notice Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\r\n     * @param a First number\r\n     * @param b Second number\r\n     * @return Difference of a and b\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        require(b <= a);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @notice Adds two numbers, reverts on overflow.\r\n     * @param a First number\r\n     * @param b Second number\r\n     * @return Sum of a and b\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a);\r\n\r\n        return c;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the largest of two numbers.\r\n     * @param a First number\r\n     * @param b Second number\r\n     * @return Largest of a and b\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a >= b ? a : b;\r\n    }\r\n}\r\n"
    },
    "contracts/handler/CompatibilityFallbackHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {ISafe} from \"./../interfaces/ISafe.sol\";\r\nimport {ISignatureValidator} from \"./../interfaces/ISignatureValidator.sol\";\r\nimport {HandlerContext} from \"./HandlerContext.sol\";\r\nimport {TokenCallbackHandler} from \"./TokenCallbackHandler.sol\";\r\n\r\n/**\r\n * @title Compatibility Fallback Handler - Provides compatibility between pre 1.3.0 and 1.3.0+ Safe Smart Account contracts.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract CompatibilityFallbackHandler is TokenCallbackHandler, ISignatureValidator, HandlerContext {\r\n    // keccak256(\"SafeMessage(bytes message)\");\r\n    bytes32 private constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\r\n\r\n    bytes4 internal constant SIMULATE_SELECTOR = bytes4(keccak256(\"simulate(address,bytes)\"));\r\n\r\n    address internal constant SENTINEL_MODULES = address(0x1);\r\n\r\n    /**\r\n     * @dev Returns the hash of a message to be signed by owners.\r\n     * @param message Raw message bytes.\r\n     * @return Message hash.\r\n     */\r\n    function getMessageHash(bytes memory message) public view returns (bytes32) {\r\n        return getMessageHashForSafe(ISafe(payable(msg.sender)), message);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the pre-image of the message hash (see getMessageHashForSafe).\r\n     * @param safe Safe to which the message is targeted.\r\n     * @param message Message that should be encoded.\r\n     * @return Encoded message.\r\n     */\r\n    function encodeMessageDataForSafe(ISafe safe, bytes memory message) public view returns (bytes memory) {\r\n        bytes32 safeMessageHash = keccak256(abi.encode(SAFE_MSG_TYPEHASH, keccak256(message)));\r\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), safe.domainSeparator(), safeMessageHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns hash of a message that can be signed by owners.\r\n     * @param safe Safe to which the message is targeted.\r\n     * @param message Message that should be hashed.\r\n     * @return Message hash.\r\n     */\r\n    function getMessageHashForSafe(ISafe safe, bytes memory message) public view returns (bytes32) {\r\n        return keccak256(encodeMessageDataForSafe(safe, message));\r\n    }\r\n\r\n    /**\r\n     * @notice Implementation of updated EIP-1271 signature validation method.\r\n     * @param _dataHash Hash of the data signed on the behalf of address(msg.sender)\r\n     * @param _signature Signature byte array associated with _dataHash\r\n     * @return Updated EIP1271 magic value if signature is valid, otherwise 0x0\r\n     */\r\n    function isValidSignature(bytes32 _dataHash, bytes calldata _signature) public view override returns (bytes4) {\r\n        // Caller should be a Safe\r\n        ISafe safe = ISafe(payable(msg.sender));\r\n        bytes memory messageData = encodeMessageDataForSafe(safe, abi.encode(_dataHash));\r\n        bytes32 messageHash = keccak256(messageData);\r\n        if (_signature.length == 0) {\r\n            require(safe.signedMessages(messageHash) != 0, \"Hash not approved\");\r\n        } else {\r\n            safe.checkSignatures(messageHash, _signature);\r\n        }\r\n        return EIP1271_MAGIC_VALUE;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns array of first 10 modules.\r\n     * @return Array of modules.\r\n     */\r\n    function getModules() external view returns (address[] memory) {\r\n        // Caller should be a Safe\r\n        ISafe safe = ISafe(payable(msg.sender));\r\n        (address[] memory array, ) = safe.getModulesPaginated(SENTINEL_MODULES, 10);\r\n        return array;\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a delegatecall on a targetContract in the context of self.\r\n     * Internally reverts execution to avoid side effects (making it static). Catches revert and returns encoded result as bytes.\r\n     * @dev Inspired by https://github.com/gnosis/util-contracts/blob/bb5fe5fb5df6d8400998094fb1b32a178a47c3a1/contracts/StorageAccessible.sol\r\n     * @param targetContract Address of the contract containing the code to execute.\r\n     * @param calldataPayload Calldata that should be sent to the target contract (encoded method name and arguments).\r\n     */\r\n    function simulate(address targetContract, bytes calldata calldataPayload) external returns (bytes memory response) {\r\n        /**\r\n         * Suppress compiler warnings about not using parameters, while allowing\r\n         * parameters to keep names for documentation purposes. This does not\r\n         * generate code.\r\n         */\r\n        targetContract;\r\n        calldataPayload;\r\n\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            /**\r\n             * Store `simulateAndRevert.selector`.\r\n             * String representation is used to force right padding\r\n             */\r\n            mstore(ptr, \"\\xb4\\xfa\\xba\\x09\")\r\n\r\n            /**\r\n             * Abuse the fact that both this and the internal methods have the\r\n             * same signature, and differ only in symbol name (and therefore,\r\n             * selector) and copy calldata directly. This saves us approximately\r\n             * 250 bytes of code and 300 gas at runtime over the\r\n             * `abi.encodeWithSelector` builtin.\r\n             */\r\n            calldatacopy(add(ptr, 0x04), 0x04, sub(calldatasize(), 0x04))\r\n\r\n            /**\r\n             * `pop` is required here by the compiler, as top level expressions\r\n             * can't have return values in inline assembly. `call` typically\r\n             * returns a 0 or 1 value indicated whether or not it reverted, but\r\n             * since we know it will always revert, we can safely ignore it.\r\n             */\r\n            pop(\r\n                call(\r\n                    gas(),\r\n                    // address() has been changed to caller() to use the implementation of the Safe\r\n                    caller(),\r\n                    0,\r\n                    ptr,\r\n                    calldatasize(),\r\n                    /**\r\n                     * The `simulateAndRevert` call always reverts, and\r\n                     * instead encodes whether or not it was successful in the return\r\n                     * data. The first 32-byte word of the return data contains the\r\n                     * `success` value, so write it to memory address 0x00 (which is\r\n                     * reserved Solidity scratch space and OK to use).\r\n                     */\r\n                    0x00,\r\n                    0x20\r\n                )\r\n            )\r\n\r\n            /**\r\n             * Allocate and copy the response bytes, making sure to increment\r\n             * the free memory pointer accordingly (in case this method is\r\n             * called as an internal function). The remaining `returndata[0x20:]`\r\n             * contains the ABI encoded response bytes, so we can just write it\r\n             * as is to memory.\r\n             */\r\n            let responseSize := sub(returndatasize(), 0x20)\r\n            response := mload(0x40)\r\n            mstore(0x40, add(response, responseSize))\r\n            returndatacopy(response, 0x20, responseSize)\r\n\r\n            if iszero(mload(0x00)) {\r\n                revert(add(response, 0x20), mload(response))\r\n            }\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n}\r\n"
    },
    "contracts/handler/HandlerContext.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title Handler Context - Allows the fallback handler to extract addition context from the calldata\r\n * @dev The fallback manager appends the following context to the calldata:\r\n *      1. Fallback manager caller address (non-padded)\r\n * based on https://github.com/OpenZeppelin/openzeppelin-contracts/blob/f8cc8b844a9f92f63dc55aa581f7d643a1bc5ac1/contracts/metatx/ERC2771Context.sol\r\n * @author Richard Meissner - @rmeissner\r\n */\r\nabstract contract HandlerContext {\r\n    /**\r\n     * @notice Allows fetching the original caller address.\r\n     * @dev This is only reliable in combination with a FallbackManager that supports this (e.g. Safe contract >=1.3.0).\r\n     *      When using this functionality make sure that the linked _manager (aka msg.sender) supports this.\r\n     *      This function does not rely on a trusted forwarder. Use the returned value only to\r\n     *      check information against the calling manager.\r\n     * @return sender Original caller address.\r\n     */\r\n    function _msgSender() internal pure returns (address sender) {\r\n        // The assembly code is more direct than the Solidity version using `abi.decode`.\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the FallbackManager address\r\n     * @return Fallback manager address\r\n     */\r\n    function _manager() internal view returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n"
    },
    "contracts/handler/TokenCallbackHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {ERC1155TokenReceiver} from \"../interfaces/ERC1155TokenReceiver.sol\";\r\nimport {ERC721TokenReceiver} from \"../interfaces/ERC721TokenReceiver.sol\";\r\nimport {ERC777TokensRecipient} from \"../interfaces/ERC777TokensRecipient.sol\";\r\nimport {IERC165} from \"../interfaces/IERC165.sol\";\r\n\r\n/**\r\n * @title Default Callback Handler - Handles supported tokens' callbacks, allowing Safes receiving these tokens.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract TokenCallbackHandler is ERC1155TokenReceiver, ERC777TokensRecipient, ERC721TokenReceiver, IERC165 {\r\n    /**\r\n     * @notice Handles ERC1155 Token callback.\r\n     * return Standardized onERC1155Received return value.\r\n     */\r\n    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure override returns (bytes4) {\r\n        return 0xf23a6e61;\r\n    }\r\n\r\n    /**\r\n     * @notice Handles ERC1155 Token batch callback.\r\n     * return Standardized onERC1155BatchReceived return value.\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address,\r\n        address,\r\n        uint256[] calldata,\r\n        uint256[] calldata,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return 0xbc197c81;\r\n    }\r\n\r\n    /**\r\n     * @notice Handles ERC721 Token callback.\r\n     *  return Standardized onERC721Received return value.\r\n     */\r\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\r\n        return 0x150b7a02;\r\n    }\r\n\r\n    /**\r\n     * @notice Handles ERC777 Token callback.\r\n     * return nothing (not standardized)\r\n     */\r\n    function tokensReceived(address, address, address, uint256, bytes calldata, bytes calldata) external pure override {\r\n        // We implement this for completeness, doesn't really have any value\r\n    }\r\n\r\n    /**\r\n     * @notice Implements ERC165 interface support for ERC1155TokenReceiver, ERC721TokenReceiver and IERC165.\r\n     * @param interfaceId Id of the interface.\r\n     * @return if the interface is supported.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\r\n        return\r\n            interfaceId == type(ERC1155TokenReceiver).interfaceId ||\r\n            interfaceId == type(ERC721TokenReceiver).interfaceId ||\r\n            interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ERC1155TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n// Note: The ERC-165 identifier for this interface is 0x4e2312e0.\r\ninterface ERC1155TokenReceiver {\r\n    /**\r\n     * @notice Handle the receipt of a single ERC1155 token type.\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\r\n     *      This function MUST return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (i.e. 0xf23a6e61) if it accepts the transfer.\r\n     *      This function MUST revert if it rejects the transfer.\r\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n     * @param _operator  The address which initiated the transfer (i.e. msg.sender).\r\n     * @param _from      The address which previously owned the token.\r\n     * @param _id        The ID of the token being transferred.\r\n     * @param _value     The amount of tokens being transferred.\r\n     * @param _data      Additional data with no specified format.\r\n     * @return           `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`.\r\n     */\r\n    function onERC1155Received(\r\n        address _operator,\r\n        address _from,\r\n        uint256 _id,\r\n        uint256 _value,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n\r\n    /**\r\n     * @notice Handle the receipt of multiple ERC1155 token types.\r\n     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\r\n     *      This function MUST return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\r\n     *      This function MUST revert if it rejects the transfer(s).\r\n     *      Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\r\n     * @param _operator  The address which initiated the batch transfer (i.e. msg.sender).\r\n     * @param _from      The address which previously owned the token.\r\n     * @param _ids       An array containing ids of each token being transferred (order and length must match _values array).\r\n     * @param _values    An array containing amounts of each token being transferred (order and length must match _ids array).\r\n     * @param _data      Additional data with no specified format.\r\n     * @return           `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`.\r\n     */\r\n    function onERC1155BatchReceived(\r\n        address _operator,\r\n        address _from,\r\n        uint256[] calldata _ids,\r\n        uint256[] calldata _values,\r\n        bytes calldata _data\r\n    ) external returns (bytes4);\r\n}\r\n"
    },
    "contracts/interfaces/ERC721TokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\r\ninterface ERC721TokenReceiver {\r\n    /**\r\n     * @notice Handle the receipt of an NFT\r\n     * @dev The ERC721 smart contract calls this function on the recipient\r\n     *  after a `transfer`. This function MAY throw to revert and reject the\r\n     *  transfer. Return of other than the magic value MUST result in the\r\n     *  transaction being reverted.\r\n     *  Note: the contract address is always the message sender.\r\n     * @param _operator The address which called `safeTransferFrom` function.\r\n     * @param _from The address which previously owned the token.\r\n     * @param _tokenId The NFT identifier which is being transferred.\r\n     * @param _data Additional data with no specified format.\r\n     * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.\r\n     *  unless throwing\r\n     */\r\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns (bytes4);\r\n}\r\n"
    },
    "contracts/interfaces/ERC777TokensRecipient.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title ERC777TokensRecipient\r\n * @dev Interface for contracts that will be called with the ERC777 token's `tokensReceived` method.\r\n * The contract receiving the tokens must implement this interface in order to receive the tokens.\r\n */\r\ninterface ERC777TokensRecipient {\r\n    /**\r\n     * @dev Called by the ERC777 token contract after a successful transfer or a minting operation.\r\n     * @param operator The address of the operator performing the transfer or minting operation.\r\n     * @param from The address of the sender.\r\n     * @param to The address of the recipient.\r\n     * @param amount The amount of tokens that were transferred or minted.\r\n     * @param data Additional data that was passed during the transfer or minting operation.\r\n     * @param operatorData Additional data that was passed by the operator during the transfer or minting operation.\r\n     */\r\n    function tokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) external;\r\n}\r\n"
    },
    "contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @notice More details at https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/introspection/IERC165.sol\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by `interfaceId`.\r\n     * See the corresponding EIP section\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
    },
    "contracts/interfaces/IFallbackManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title IFallbackManager - A contract interface managing fallback calls made to this contract.\r\n * @author @safe-global/safe-protocol\r\n */\r\ninterface IFallbackManager {\r\n    event ChangedFallbackHandler(address indexed handler);\r\n\r\n    /**\r\n     * @notice Set Fallback Handler to `handler` for the Safe.\r\n     * @dev Only fallback calls without value and with data will be forwarded.\r\n     *      This can only be done via a Safe transaction.\r\n     *      Cannot be set to the Safe itself.\r\n     * @param handler contract to handle fallback calls.\r\n     */\r\n    function setFallbackHandler(address handler) external;\r\n}\r\n"
    },
    "contracts/interfaces/IGuardManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n/* solhint-disable one-contract-per-file */\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title IGuardManager - A contract interface managing transaction guards which perform pre and post-checks on Safe transactions.\r\n * @author @safe-global/safe-protocol\r\n */\r\ninterface IGuardManager {\r\n    event ChangedGuard(address indexed guard);\r\n\r\n    /**\r\n     * @dev Set a guard that checks transactions before execution\r\n     *      This can only be done via a Safe transaction.\r\n     *      ⚠️ IMPORTANT: Since a guard has full power to block Safe transaction execution,\r\n     *        a broken guard can cause a denial of service for the Safe. Make sure to carefully\r\n     *        audit the guard code and design recovery mechanisms.\r\n     * @notice Set Transaction Guard `guard` for the Safe. Make sure you trust the guard.\r\n     * @param guard The address of the guard to be used or the 0 address to disable the guard\r\n     */\r\n    function setGuard(address guard) external;\r\n}\r\n"
    },
    "contracts/interfaces/IModuleManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\nimport {Enum} from \"../libraries/Enum.sol\";\r\n\r\n/**\r\n * @title IModuleManager - An interface of contract managing Safe modules\r\n * @notice Modules are extensions with unlimited access to a Safe that can be added to a Safe by its owners.\r\n           ⚠️ WARNING: Modules are a security risk since they can execute arbitrary transactions, \r\n           so only trusted and audited modules should be added to a Safe. A malicious module can\r\n           completely takeover a Safe.\r\n * @author @safe-global/safe-protocol\r\n */\r\ninterface IModuleManager {\r\n    event EnabledModule(address indexed module);\r\n    event DisabledModule(address indexed module);\r\n    event ExecutionFromModuleSuccess(address indexed module);\r\n    event ExecutionFromModuleFailure(address indexed module);\r\n    event ChangedModuleGuard(address indexed moduleGuard);\r\n\r\n    /**\r\n     * @notice Enables the module `module` for the Safe.\r\n     * @dev This can only be done via a Safe transaction.\r\n     * @param module Module to be whitelisted.\r\n     */\r\n    function enableModule(address module) external;\r\n\r\n    /**\r\n     * @notice Disables the module `module` for the Safe.\r\n     * @dev This can only be done via a Safe transaction.\r\n     * @param prevModule Previous module in the modules linked list.\r\n     * @param module Module to be removed.\r\n     */\r\n    function disableModule(address prevModule, address module) external;\r\n\r\n    /**\r\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token)\r\n     * @param to Destination address of module transaction.\r\n     * @param value Ether value of module transaction.\r\n     * @param data Data payload of module transaction.\r\n     * @param operation Operation type of module transaction.\r\n     * @return success Boolean flag indicating if the call succeeded.\r\n     */\r\n    function execTransactionFromModule(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) external returns (bool success);\r\n\r\n    /**\r\n     * @notice Execute `operation` (0: Call, 1: DelegateCall) to `to` with `value` (Native Token) and return data\r\n     * @param to Destination address of module transaction.\r\n     * @param value Ether value of module transaction.\r\n     * @param data Data payload of module transaction.\r\n     * @param operation Operation type of module transaction.\r\n     * @return success Boolean flag indicating if the call succeeded.\r\n     * @return returnData Data returned by the call.\r\n     */\r\n    function execTransactionFromModuleReturnData(\r\n        address to,\r\n        uint256 value,\r\n        bytes memory data,\r\n        Enum.Operation operation\r\n    ) external returns (bool success, bytes memory returnData);\r\n\r\n    /**\r\n     * @notice Returns if an module is enabled\r\n     * @return True if the module is enabled\r\n     */\r\n    function isModuleEnabled(address module) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Returns an array of modules.\r\n     *         If all entries fit into a single page, the next pointer will be 0x1.\r\n     *         If another page is present, next will be the last element of the returned array.\r\n     * @param start Start of the page. Has to be a module or start pointer (0x1 address)\r\n     * @param pageSize Maximum number of modules that should be returned. Has to be > 0\r\n     * @return array Array of modules.\r\n     * @return next Start of the next page.\r\n     */\r\n    function getModulesPaginated(address start, uint256 pageSize) external view returns (address[] memory array, address next);\r\n\r\n    /**\r\n     * @dev Set a module guard that checks transactions initiated by the module before execution\r\n     *      This can only be done via a Safe transaction.\r\n     *      ⚠️ IMPORTANT: Since a module guard has full power to block Safe transaction execution initiatied via a module,\r\n     *        a broken module guard can cause a denial of service for the Safe modules. Make sure to carefully\r\n     *        audit the module guard code and design recovery mechanisms.\r\n     * @notice Set Module Guard `moduleGuard` for the Safe. Make sure you trust the module guard.\r\n     * @param moduleGuard The address of the module guard to be used or the zero address to disable the module guard.\r\n     */\r\n    function setModuleGuard(address moduleGuard) external;\r\n}\r\n"
    },
    "contracts/interfaces/IOwnerManager.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title IOwnerManager - Interface for contract which manages Safe owners and a threshold to authorize transactions.\r\n * @author @safe-global/safe-protocol\r\n */\r\ninterface IOwnerManager {\r\n    event AddedOwner(address indexed owner);\r\n    event RemovedOwner(address indexed owner);\r\n    event ChangedThreshold(uint256 threshold);\r\n\r\n    /**\r\n     * @notice Adds the owner `owner` to the Safe and updates the threshold to `_threshold`.\r\n     * @dev This can only be done via a Safe transaction.\r\n     * @param owner New owner address.\r\n     * @param _threshold New threshold.\r\n     */\r\n    function addOwnerWithThreshold(address owner, uint256 _threshold) external;\r\n\r\n    /**\r\n     * @notice Removes the owner `owner` from the Safe and updates the threshold to `_threshold`.\r\n     * @dev This can only be done via a Safe transaction.\r\n     * @param prevOwner Owner that pointed to the owner to be removed in the linked list\r\n     * @param owner Owner address to be removed.\r\n     * @param _threshold New threshold.\r\n     */\r\n    function removeOwner(address prevOwner, address owner, uint256 _threshold) external;\r\n\r\n    /**\r\n     * @notice Replaces the owner `oldOwner` in the Safe with `newOwner`.\r\n     * @dev This can only be done via a Safe transaction.\r\n     * @param prevOwner Owner that pointed to the owner to be replaced in the linked list\r\n     * @param oldOwner Owner address to be replaced.\r\n     * @param newOwner New owner address.\r\n     */\r\n    function swapOwner(address prevOwner, address oldOwner, address newOwner) external;\r\n\r\n    /**\r\n     * @notice Changes the threshold of the Safe to `_threshold`.\r\n     * @dev This can only be done via a Safe transaction.\r\n     * @param _threshold New threshold.\r\n     */\r\n    function changeThreshold(uint256 _threshold) external;\r\n\r\n    /**\r\n     * @notice Returns the number of required confirmations for a Safe transaction aka the threshold.\r\n     * @return Threshold number.\r\n     */\r\n    function getThreshold() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns if `owner` is an owner of the Safe.\r\n     * @return Boolean if owner is an owner of the Safe.\r\n     */\r\n    function isOwner(address owner) external view returns (bool);\r\n\r\n    /**\r\n     * @notice Returns a list of Safe owners.\r\n     * @return Array of Safe owners.\r\n     */\r\n    function getOwners() external view returns (address[] memory);\r\n}\r\n"
    },
    "contracts/interfaces/ISafe.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {Enum} from \"./../libraries/Enum.sol\";\r\nimport {IFallbackManager} from \"./IFallbackManager.sol\";\r\nimport {IGuardManager} from \"./IGuardManager.sol\";\r\nimport {IModuleManager} from \"./IModuleManager.sol\";\r\nimport {IOwnerManager} from \"./IOwnerManager.sol\";\r\n\r\n/**\r\n * @title ISafe - A multisignature wallet interface with support for confirmations using signed messages based on EIP-712.\r\n * @author @safe-global/safe-protocol\r\n */\r\ninterface ISafe is IModuleManager, IGuardManager, IOwnerManager, IFallbackManager {\r\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\r\n    event ApproveHash(bytes32 indexed approvedHash, address indexed owner);\r\n    event SignMsg(bytes32 indexed msgHash);\r\n    event ExecutionFailure(bytes32 indexed txHash, uint256 payment);\r\n    event ExecutionSuccess(bytes32 indexed txHash, uint256 payment);\r\n\r\n    /**\r\n     * @notice Sets an initial storage of the Safe contract.\r\n     * @dev This method can only be called once.\r\n     *      If a proxy was created without setting up, anyone can call setup and claim the proxy.\r\n     * @param _owners List of Safe owners.\r\n     * @param _threshold Number of required confirmations for a Safe transaction.\r\n     * @param to Contract address for optional delegate call.\r\n     * @param data Data payload for optional delegate call.\r\n     * @param fallbackHandler Handler for fallback calls to this contract\r\n     * @param paymentToken Token that should be used for the payment (0 is ETH)\r\n     * @param payment Value that should be paid\r\n     * @param paymentReceiver Address that should receive the payment (or 0 if tx.origin)\r\n     */\r\n    function setup(\r\n        address[] calldata _owners,\r\n        uint256 _threshold,\r\n        address to,\r\n        bytes calldata data,\r\n        address fallbackHandler,\r\n        address paymentToken,\r\n        uint256 payment,\r\n        address payable paymentReceiver\r\n    ) external;\r\n\r\n    /** @notice Executes a `operation` {0: Call, 1: DelegateCall}} transaction to `to` with `value` (Native Currency)\r\n     *          and pays `gasPrice` * `gasLimit` in `gasToken` token to `refundReceiver`.\r\n     * @dev The fees are always transferred, even if the user transaction fails.\r\n     *      This method doesn't perform any sanity check of the transaction, such as:\r\n     *      - if the contract at `to` address has code or not\r\n     *      - if the `gasToken` is a contract or not\r\n     *      It is the responsibility of the caller to perform such checks.\r\n     * @param to Destination address of Safe transaction.\r\n     * @param value Ether value of Safe transaction.\r\n     * @param data Data payload of Safe transaction.\r\n     * @param operation Operation type of Safe transaction.\r\n     * @param safeTxGas Gas that should be used for the Safe transaction.\r\n     * @param baseGas Gas costs that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\r\n     * @param gasPrice Gas price that should be used for the payment calculation.\r\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\r\n     * @param signatures Signature data that should be verified.\r\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\r\n     * @return success Boolean indicating transaction's success.\r\n     */\r\n    function execTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address payable refundReceiver,\r\n        bytes memory signatures\r\n    ) external payable returns (bool success);\r\n\r\n    /**\r\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\r\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\r\n     * @param signatures Signature data that should be verified.\r\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\r\n     */\r\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) external view;\r\n\r\n    /**\r\n     * @notice Checks whether the signature provided is valid for the provided data and hash. Reverts otherwise.\r\n     * @dev Since the EIP-1271 does an external call, be mindful of reentrancy attacks.\r\n     * @param executor Address that executing the transaction.\r\n     *        ⚠️⚠️⚠️ Make sure that the executor address is a legitmate executor.\r\n     *        Incorrectly passed the executor might reduce the threshold by 1 signature. ⚠️⚠️⚠️\r\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\r\n     * @param signatures Signature data that should be verified.\r\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\r\n     * @param requiredSignatures Amount of required valid signatures.\r\n     */\r\n    function checkNSignatures(address executor, bytes32 dataHash, bytes memory signatures, uint256 requiredSignatures) external view;\r\n\r\n    /**\r\n     * @notice Marks hash `hashToApprove` as approved.\r\n     * @dev This can be used with a pre-approved hash transaction signature.\r\n     *      IMPORTANT: The approved hash stays approved forever. There's no revocation mechanism, so it behaves similarly to ECDSA signatures\r\n     * @param hashToApprove The hash to mark as approved for signatures that are verified by this contract.\r\n     */\r\n    function approveHash(bytes32 hashToApprove) external;\r\n\r\n    /**\r\n     * @dev Returns the domain separator for this contract, as defined in the EIP-712 standard.\r\n     * @return bytes32 The domain separator hash.\r\n     */\r\n    function domainSeparator() external view returns (bytes32);\r\n\r\n    /**\r\n     * @notice Returns transaction hash to be signed by owners.\r\n     * @param to Destination address.\r\n     * @param value Ether value.\r\n     * @param data Data payload.\r\n     * @param operation Operation type.\r\n     * @param safeTxGas Gas that should be used for the safe transaction.\r\n     * @param baseGas Gas costs for data used to trigger the safe transaction.\r\n     * @param gasPrice Maximum gas price that should be used for this transaction.\r\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\r\n     * @param _nonce Transaction nonce.\r\n     * @return Transaction hash.\r\n     */\r\n    function getTransactionHash(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address refundReceiver,\r\n        uint256 _nonce\r\n    ) external view returns (bytes32);\r\n\r\n    /**\r\n     * External getter function for state variables.\r\n     */\r\n\r\n    /**\r\n     * @notice Returns the version of the Safe contract.\r\n     * @return Version string.\r\n     */\r\n    // solhint-disable-next-line\r\n    function VERSION() external view returns (string memory);\r\n\r\n    /**\r\n     * @notice Returns the nonce of the Safe contract.\r\n     * @return Nonce.\r\n     */\r\n    function nonce() external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns a uint if the messageHash is signed by the owner.\r\n     * @param messageHash Hash of message that should be checked.\r\n     * @return Number denoting if an owner signed the hash.\r\n     */\r\n    function signedMessages(bytes32 messageHash) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice Returns a uint if the messageHash is approved by the owner.\r\n     * @param owner Owner address that should be checked.\r\n     * @param messageHash Hash of message that should be checked.\r\n     * @return Number denoting if an owner approved the hash.\r\n     */\r\n    function approvedHashes(address owner, bytes32 messageHash) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/ISignatureValidator.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n/* solhint-disable one-contract-per-file */\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\ncontract ISignatureValidatorConstants {\r\n    // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\r\n    bytes4 internal constant EIP1271_MAGIC_VALUE = 0x1626ba7e;\r\n}\r\n\r\nabstract contract ISignatureValidator is ISignatureValidatorConstants {\r\n    /**\r\n     * @notice EIP1271 method to validate a signature.\r\n     * @param _hash Hash of the data signed on the behalf of address(this).\r\n     * @param _signature Signature byte array associated with _data.\r\n     *\r\n     * MUST return the bytes4 magic value 0x1626ba7e when function passes.\r\n     * MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\r\n     * MUST allow external calls\r\n     */\r\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external view virtual returns (bytes4);\r\n}\r\n"
    },
    "contracts/interfaces/ViewStorageAccessible.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.5.0 <0.9.0;\r\n\r\n/// @title ViewStorageAccessible - Interface on top of StorageAccessible base class to allow simulations from view functions.\r\n/// @notice Adjusted version of https://github.com/gnosis/util-contracts/blob/3db1e531cb243a48ea91c60a800d537c1000612a/contracts/StorageAccessible.sol\r\ninterface ViewStorageAccessible {\r\n    /**\r\n     * @dev Same as `simulate` on StorageAccessible. Marked as view so that it can be called from external contracts\r\n     * that want to run simulations from within view functions. Will revert if the invoked simulation attempts to change state.\r\n     */\r\n    function simulate(address targetContract, bytes calldata calldataPayload) external view returns (bytes memory);\r\n}\r\n"
    },
    "contracts/libraries/CreateCall.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title Create Call - Allows to use the different create opcodes to deploy a contract.\r\n * @author Richard Meissner - @rmeissner\r\n * @notice This contract provides functions for deploying a new contract using the create and create2 opcodes.\r\n */\r\ncontract CreateCall {\r\n    /// @notice Emitted when a new contract is created\r\n    event ContractCreation(address indexed newContract);\r\n\r\n    /**\r\n     * @notice Deploys a new contract using the create2 opcode.\r\n     * @param value The value in wei to be sent with the contract creation.\r\n     * @param deploymentData The initialisation code of the contract to be created.\r\n     * @param salt The salt value to use for the contract creation.\r\n     * @return newContract The address of the newly created contract.\r\n     */\r\n    function performCreate2(uint256 value, bytes memory deploymentData, bytes32 salt) public returns (address newContract) {\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            newContract := create2(value, add(0x20, deploymentData), mload(deploymentData), salt)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n        require(newContract != address(0), \"Could not deploy contract\");\r\n        emit ContractCreation(newContract);\r\n    }\r\n\r\n    /**\r\n     * @notice Deploys a new contract using the create opcode.\r\n     * @param value The value in wei to be sent with the contract creation.\r\n     * @param deploymentData The initialisation code of the contract to be created.\r\n     * @return newContract The address of the newly created contract.\r\n     */\r\n    function performCreate(uint256 value, bytes memory deploymentData) public returns (address newContract) {\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            newContract := create(value, add(deploymentData, 0x20), mload(deploymentData))\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n        require(newContract != address(0), \"Could not deploy contract\");\r\n        emit ContractCreation(newContract);\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/Enum.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title Enum - Collection of enums used in Safe Smart Account contracts.\r\n * @author @safe-global/safe-protocol\r\n */\r\nlibrary Enum {\r\n    enum Operation {\r\n        Call,\r\n        DelegateCall\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/ErrorMessage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title Error Message - Contract which uses assembly to revert with a custom error message.\r\n * @author Shebin John - @remedcu\r\n * @notice The aim is to save gas using assembly to revert with custom error message.\r\n */\r\nabstract contract ErrorMessage {\r\n    /**\r\n     * @notice Function which uses assembly to revert with the passed error message.\r\n     * @param error The error string to revert with.\r\n     * @dev Currently it is expected that the `error` string is at max 5 bytes of length. Ex: \"GSXXX\"\r\n     */\r\n    function revertWithError(bytes5 error) internal pure {\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000) // Selector for method \"Error(string)\"\r\n            mstore(add(ptr, 0x04), 0x20) // String offset\r\n            mstore(add(ptr, 0x24), 0x05) // Revert reason length (5 bytes for bytes5)\r\n            mstore(add(ptr, 0x44), error) // Revert reason\r\n            revert(ptr, 0x64) // Revert data length is 4 bytes for selector + offset + error length + error.\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/MultiSend.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title Multi Send - Allows to batch multiple transactions into one.\r\n * @author Nick Dodson - <nick.dodson@consensys.net>\r\n * @author Gonçalo Sá - <goncalo.sa@consensys.net>\r\n * @author Stefan George - @Georgi87\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract MultiSend {\r\n    address private immutable MULTISEND_SINGLETON;\r\n\r\n    constructor() {\r\n        MULTISEND_SINGLETON = address(this);\r\n    }\r\n\r\n    /**\r\n     * @dev Sends multiple transactions and reverts all if one fails.\r\n     * @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\r\n     *                     operation as a uint8 with 0 for a call or 1 for a delegatecall (=> 1 byte),\r\n     *                     to as a address (=> 20 bytes),\r\n     *                     value as a uint256 (=> 32 bytes),\r\n     *                     data length as a uint256 (=> 32 bytes),\r\n     *                     data as bytes.\r\n     *                     see abi.encodePacked for more information on packed encoding\r\n     * @notice This method is payable as delegatecalls keep the msg.value from the previous call\r\n     *         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\r\n     */\r\n    function multiSend(bytes memory transactions) public payable {\r\n        require(address(this) != MULTISEND_SINGLETON, \"MultiSend should only be called via delegatecall\");\r\n        /* solhint-disable no-inline-assembly */\r\n        assembly {\r\n            let length := mload(transactions)\r\n            let i := 0x20\r\n            for {\r\n                // Pre block is not used in \"while mode\"\r\n            } lt(i, length) {\r\n                // Post block is not used in \"while mode\"\r\n            } {\r\n                // First byte of the data is the operation.\r\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\r\n                // This will also zero out unused data.\r\n                let operation := shr(0xf8, mload(add(transactions, i)))\r\n                // We offset the load address by 1 byte (operation byte)\r\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\r\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\r\n                // Defaults `to` to `address(this)` if `address(0)` is provided.\r\n                to := or(to, mul(iszero(to), address()))\r\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\r\n                let value := mload(add(transactions, add(i, 0x15)))\r\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\r\n                let dataLength := mload(add(transactions, add(i, 0x35)))\r\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\r\n                let data := add(transactions, add(i, 0x55))\r\n                let success := 0\r\n                switch operation\r\n                case 0 {\r\n                    success := call(gas(), to, value, data, dataLength, 0, 0)\r\n                }\r\n                case 1 {\r\n                    success := delegatecall(gas(), to, data, dataLength, 0, 0)\r\n                }\r\n                if eq(success, 0) {\r\n                    returndatacopy(0, 0, returndatasize())\r\n                    revert(0, returndatasize())\r\n                }\r\n                // Next entry starts at 85 byte + data length\r\n                i := add(i, add(0x55, dataLength))\r\n            }\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/MultiSendCallOnly.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title Multi Send Call Only - Allows to batch multiple transactions into one, but only calls\r\n * @notice The guard logic is not required here as this contract doesn't support nested delegate calls\r\n * @author Stefan George - @Georgi87\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract MultiSendCallOnly {\r\n    /**\r\n     * @dev Sends multiple transactions and reverts all if one fails.\r\n     * @param transactions Encoded transactions. Each transaction is encoded as a packed bytes of\r\n     *                     operation has to be uint8(0) in this version (=> 1 byte),\r\n     *                     to as a address (=> 20 bytes),\r\n     *                     value as a uint256 (=> 32 bytes),\r\n     *                     data length as a uint256 (=> 32 bytes),\r\n     *                     data as bytes.\r\n     *                     see abi.encodePacked for more information on packed encoding\r\n     * @notice The code is for most part the same as the normal MultiSend (to keep compatibility),\r\n     *         but reverts if a transaction tries to use a delegatecall.\r\n     * @notice This method is payable as delegatecalls keep the msg.value from the previous call\r\n     *         If the calling method (e.g. execTransaction) received ETH this would revert otherwise\r\n     */\r\n    function multiSend(bytes memory transactions) public payable {\r\n        /* solhint-disable no-inline-assembly */\r\n        assembly {\r\n            let length := mload(transactions)\r\n            let i := 0x20\r\n            for {\r\n                // Pre block is not used in \"while mode\"\r\n            } lt(i, length) {\r\n                // Post block is not used in \"while mode\"\r\n            } {\r\n                // First byte of the data is the operation.\r\n                // We shift by 248 bits (256 - 8 [operation byte]) it right since mload will always load 32 bytes (a word).\r\n                // This will also zero out unused data.\r\n                let operation := shr(0xf8, mload(add(transactions, i)))\r\n                // We offset the load address by 1 byte (operation byte)\r\n                // We shift it right by 96 bits (256 - 160 [20 address bytes]) to right-align the data and zero out unused data.\r\n                let to := shr(0x60, mload(add(transactions, add(i, 0x01))))\r\n                // Defaults `to` to `address(this)` if `address(0)` is provided.\r\n                to := or(to, mul(iszero(to), address()))\r\n                // We offset the load address by 21 byte (operation byte + 20 address bytes)\r\n                let value := mload(add(transactions, add(i, 0x15)))\r\n                // We offset the load address by 53 byte (operation byte + 20 address bytes + 32 value bytes)\r\n                let dataLength := mload(add(transactions, add(i, 0x35)))\r\n                // We offset the load address by 85 byte (operation byte + 20 address bytes + 32 value bytes + 32 data length bytes)\r\n                let data := add(transactions, add(i, 0x55))\r\n                let success := 0\r\n                switch operation\r\n                case 0 {\r\n                    success := call(gas(), to, value, data, dataLength, 0, 0)\r\n                }\r\n                // This version does not allow delegatecalls\r\n                case 1 {\r\n                    revert(0, 0)\r\n                }\r\n                if eq(success, 0) {\r\n                    returndatacopy(0, 0, returndatasize())\r\n                    revert(0, returndatasize())\r\n                }\r\n                // Next entry starts at 85 byte + data length\r\n                i := add(i, add(0x55, dataLength))\r\n            }\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/SafeMigration.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {ISafe} from \"./../interfaces/ISafe.sol\";\r\nimport {SafeStorage} from \"./../libraries/SafeStorage.sol\";\r\n\r\n/**\r\n * @title Migration Contract for Safe Upgrade\r\n * @notice This is a generic contract that facilitates Safe and SafeL2 proxy contracts to migrate their singleton address.\r\n *         The supported target Safe version is immutable and set in the constructor during the deployment of the contract.\r\n *         This contract also supports migration with fallback handler update.\r\n * @author @safe-global/safe-protocol\r\n * @dev IMPORTANT: The library is intended to be used with the Safe standard proxy that stores the singleton address\r\n *      at the storage slot 0. Use at your own risk with custom proxy implementations. The contract will allow invocations\r\n *      to the migration functions only via delegatecall.\r\n */\r\ncontract SafeMigration is SafeStorage {\r\n    /**\r\n     * @notice Address of this contract\r\n     */\r\n    address public immutable MIGRATION_SINGLETON;\r\n    /**\r\n     * @notice Address of the Safe Singleton implementation\r\n     */\r\n    address public immutable SAFE_SINGLETON;\r\n    /**\r\n     * @notice Address of the Safe Singleton (L2) implementation\r\n     */\r\n    address public immutable SAFE_L2_SINGLETON;\r\n    /**\r\n     * @notice Address of the Fallback Handler\r\n     */\r\n    address public immutable SAFE_FALLBACK_HANDLER;\r\n\r\n    /**\r\n     * @notice Event indicating a change of a singleton address. Named master copy here for legacy reasons.\r\n     * @param singleton New master copy address\r\n     */\r\n    event ChangedMasterCopy(address singleton);\r\n\r\n    /**\r\n     * @notice Modifier to make a function callable via delegatecall only.\r\n     * If the function is called via a regular call, it will revert.\r\n     */\r\n    modifier onlyDelegateCall() {\r\n        require(address(this) != MIGRATION_SINGLETON, \"Migration should only be called via delegatecall\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @param safeSingleton Address of the Safe Singleton implementation\r\n     * @param safeL2Singleton Address of the SafeL2 Singleton implementation\r\n     * @param fallbackHandler Address of the fallback handler implementation\r\n     */\r\n    constructor(address safeSingleton, address safeL2Singleton, address fallbackHandler) {\r\n        MIGRATION_SINGLETON = address(this);\r\n\r\n        require(hasCode(safeSingleton), \"Safe Singleton is not deployed\");\r\n        require(hasCode(safeL2Singleton), \"Safe Singleton (L2) is not deployed\");\r\n        require(hasCode(fallbackHandler), \"fallback handler is not deployed\");\r\n\r\n        SAFE_SINGLETON = safeSingleton;\r\n        SAFE_L2_SINGLETON = safeL2Singleton;\r\n        SAFE_FALLBACK_HANDLER = fallbackHandler;\r\n    }\r\n\r\n    /**\r\n     * @notice Migrate the Safe contract to a new Safe Singleton implementation.\r\n     */\r\n    function migrateSingleton() public onlyDelegateCall {\r\n        singleton = SAFE_SINGLETON;\r\n        emit ChangedMasterCopy(SAFE_SINGLETON);\r\n    }\r\n\r\n    /**\r\n     * @notice Migrate to Safe Singleton and set the fallback handler. This function is intended to be used when migrating\r\n     *         a Safe to a version which also requires updating fallback handler.\r\n     */\r\n    function migrateWithFallbackHandler() external onlyDelegateCall {\r\n        migrateSingleton();\r\n        ISafe(address(this)).setFallbackHandler(SAFE_FALLBACK_HANDLER);\r\n    }\r\n\r\n    /**\r\n     * @notice Migrate the Safe contract to a new Safe Singleton (L2) implementation.\r\n     */\r\n    function migrateL2Singleton() public onlyDelegateCall {\r\n        singleton = SAFE_L2_SINGLETON;\r\n        emit ChangedMasterCopy(SAFE_L2_SINGLETON);\r\n    }\r\n\r\n    /**\r\n     * @notice Migrate to Safe Singleton (L2) and set the fallback handler. This function is intended to be used when migrating\r\n     *         a Safe to a version which also requires updating fallback handler.\r\n     */\r\n    function migrateL2WithFallbackHandler() external onlyDelegateCall {\r\n        migrateL2Singleton();\r\n        ISafe(address(this)).setFallbackHandler(SAFE_FALLBACK_HANDLER);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks whether an account has code.\r\n     * @param account The address of the account to be checked.\r\n     * @return A boolean value indicating whether the address has code (true) or not (false).\r\n     * @dev This function relies on the `extcodesize` assembly opcode to determine whether an address has code.\r\n     * It does not reliably determine whether or not an address is a smart contract or an EOA.\r\n     */\r\n    function hasCode(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n\r\n        return size > 0;\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/SafeStorage.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title SafeStorage - Storage layout of the Safe Smart Account contracts to be used in libraries.\r\n * @dev Should be always the first base contract of a library that is used with a Safe.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract SafeStorage {\r\n    // From /common/Singleton.sol\r\n    address internal singleton;\r\n    // From /common/ModuleManager.sol\r\n    mapping(address => address) internal modules;\r\n    // From /common/OwnerManager.sol\r\n    mapping(address => address) internal owners;\r\n    uint256 internal ownerCount;\r\n    uint256 internal threshold;\r\n\r\n    // From /Safe.sol\r\n    uint256 internal nonce;\r\n    bytes32 internal _deprecatedDomainSeparator;\r\n    mapping(bytes32 => uint256) internal signedMessages;\r\n    mapping(address => mapping(bytes32 => uint256)) internal approvedHashes;\r\n}\r\n"
    },
    "contracts/libraries/SafeToL2Migration.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n/* solhint-disable one-contract-per-file */\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {ISafe} from \"./../interfaces/ISafe.sol\";\r\nimport {Enum} from \"./../libraries/Enum.sol\";\r\nimport {SafeStorage} from \"./../libraries/SafeStorage.sol\";\r\n\r\n/**\r\n * @title Migration Contract for updating a Safe from 1.1.1/1.3.0/1.4.1 versions to a L2 version. Useful when replaying a Safe from a non L2 network in a L2 network.\r\n * @notice This contract facilitates the migration of a Safe contract from version 1.1.1 to 1.3.0/1.4.1 L2, 1.3.0 to 1.3.0L2 or from 1.4.1 to 1.4.1L2\r\n *         Other versions are not supported\r\n * @dev IMPORTANT: The migration will only work with proxies that store the implementation address in the storage slot 0.\r\n */\r\ncontract SafeToL2Migration is SafeStorage {\r\n    // Address of this contract\r\n    address public immutable MIGRATION_SINGLETON;\r\n\r\n    /**\r\n     * @notice Constructor\r\n     * @dev Initializes the migrationSingleton with the contract's own address.\r\n     */\r\n    constructor() {\r\n        MIGRATION_SINGLETON = address(this);\r\n    }\r\n\r\n    /**\r\n     * @notice Event indicating a change of master copy address.\r\n     * @param singleton New master copy address\r\n     */\r\n    event ChangedMasterCopy(address singleton);\r\n\r\n    event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler);\r\n\r\n    event SafeMultiSigTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address payable refundReceiver,\r\n        bytes signatures,\r\n        // We combine nonce, sender and threshold into one to avoid stack too deep\r\n        // Dev note: additionalInfo should not contain `bytes`, as this complicates decoding\r\n        bytes additionalInfo\r\n    );\r\n\r\n    /**\r\n     * @notice Modifier to make a function callable via delegatecall only.\r\n     * If the function is called via a regular call, it will revert.\r\n     */\r\n    modifier onlyDelegateCall() {\r\n        require(address(this) != MIGRATION_SINGLETON, \"Migration should only be called via delegatecall\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to prevent using initialized Safes.\r\n     * If Safe has a nonce higher than 0, it will revert\r\n     */\r\n    modifier onlyNonceZero() {\r\n        // Nonce is increased before executing a tx, so first executed tx will have nonce=1\r\n        require(nonce == 1, \"Safe must have not executed any tx\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function with common migration steps, changes the singleton and emits SafeMultiSigTransaction event\r\n     */\r\n    function migrate(address l2Singleton, bytes memory functionData) private {\r\n        singleton = l2Singleton;\r\n\r\n        // Encode nonce, sender, threshold\r\n        bytes memory additionalInfo = abi.encode(0, msg.sender, threshold);\r\n\r\n        // Simulate a L2 transaction so Safe Tx Service indexer picks up the Safe\r\n        emit SafeMultiSigTransaction(\r\n            MIGRATION_SINGLETON,\r\n            0,\r\n            functionData,\r\n            Enum.Operation.DelegateCall,\r\n            0,\r\n            0,\r\n            0,\r\n            address(0),\r\n            payable(address(0)),\r\n            \"\", // We cannot detect signatures\r\n            additionalInfo\r\n        );\r\n        emit ChangedMasterCopy(l2Singleton);\r\n    }\r\n\r\n    /**\r\n     * @notice Migrate from Safe 1.3.0/1.4.1 Singleton (L1) to the same version provided L2 singleton\r\n     * Safe is required to have nonce 0 so backend can support it after the migration\r\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\r\n     * Singletons versions will be compared, so it implies that contracts exist\r\n     */\r\n    function migrateToL2(address l2Singleton) external onlyDelegateCall onlyNonceZero {\r\n        address _singleton = singleton;\r\n        require(_singleton != l2Singleton, \"Safe is already using the singleton\");\r\n        bytes32 oldSingletonVersion = keccak256(abi.encodePacked(ISafe(_singleton).VERSION()));\r\n        bytes32 newSingletonVersion = keccak256(abi.encodePacked(ISafe(l2Singleton).VERSION()));\r\n\r\n        require(oldSingletonVersion == newSingletonVersion, \"L2 singleton must match current version singleton\");\r\n        // There's no way to make sure if address is a valid singleton, unless we configure the contract for every chain\r\n        require(\r\n            newSingletonVersion == keccak256(abi.encodePacked(\"1.3.0\")) || newSingletonVersion == keccak256(abi.encodePacked(\"1.4.1\")),\r\n            \"Provided singleton version is not supported\"\r\n        );\r\n\r\n        // 0xef2624ae - bytes4(keccak256(\"migrateToL2(address)\"))\r\n        bytes memory functionData = abi.encodeWithSelector(0xef2624ae, l2Singleton);\r\n        migrate(l2Singleton, functionData);\r\n    }\r\n\r\n    /**\r\n     * @notice Migrate from Safe 1.1.1 Singleton to 1.3.0 or 1.4.1 L2\r\n     * Safe is required to have nonce 0 so backend can support it after the migration\r\n     * @dev This function should only be called via a delegatecall to perform the upgrade.\r\n     * Singletons version will be checked, so it implies that contracts exist.\r\n     * A valid and compatible fallbackHandler needs to be provided, only existence will be checked.\r\n     */\r\n    function migrateFromV111(address l2Singleton, address fallbackHandler) external onlyDelegateCall onlyNonceZero {\r\n        require(isContract(fallbackHandler), \"fallbackHandler is not a contract\");\r\n\r\n        bytes32 oldSingletonVersion = keccak256(abi.encodePacked(ISafe(singleton).VERSION()));\r\n        require(oldSingletonVersion == keccak256(abi.encodePacked(\"1.1.1\")), \"Provided singleton version is not supported\");\r\n\r\n        bytes32 newSingletonVersion = keccak256(abi.encodePacked(ISafe(l2Singleton).VERSION()));\r\n        require(\r\n            newSingletonVersion == keccak256(abi.encodePacked(\"1.3.0\")) || newSingletonVersion == keccak256(abi.encodePacked(\"1.4.1\")),\r\n            \"Provided singleton version is not supported\"\r\n        );\r\n\r\n        ISafe safe = ISafe(address(this));\r\n        safe.setFallbackHandler(fallbackHandler);\r\n\r\n        // Safes < 1.3.0 did not emit SafeSetup, so Safe Tx Service backend needs the event to index the Safe\r\n        emit SafeSetup(MIGRATION_SINGLETON, getOwners(), threshold, address(0), fallbackHandler);\r\n\r\n        // 0xd9a20812 - bytes4(keccak256(\"migrateFromV111(address,address)\"))\r\n        bytes memory functionData = abi.encodeWithSelector(0xd9a20812, l2Singleton, fallbackHandler);\r\n        migrate(l2Singleton, functionData);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks whether an Ethereum address corresponds to a contract or an externally owned account (EOA).\r\n     * @param account The Ethereum address to be checked.\r\n     * @return A boolean value indicating whether the address is associated with a contract (true) or an EOA (false).\r\n     * @dev This function relies on the `extcodesize` assembly opcode to determine whether an address is a contract.\r\n     * It may return incorrect results in some edge cases (see documentation for details).\r\n     * Developers should use caution when relying on the results of this function for critical decision-making.\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n\r\n        // If the code size is greater than 0, it is a contract; otherwise, it is an EOA.\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns a list of Safe owners.\r\n     * @dev This function is copied from `OwnerManager.sol` and takes advantage of the fact that\r\n     * migration happens with a `DELEGATECALL` in the context of the migrating account, which allows\r\n     * us to read the owners directly from storage and avoid the additional overhead of a `CALL`\r\n     * into the account implementation. Note that we can rely on the memory layout of the {owners}\r\n     * @return Array of Safe owners.\r\n     */\r\n    function getOwners() internal view returns (address[] memory) {\r\n        address[] memory array = new address[](ownerCount);\r\n        address sentinelOwners = address(0x1);\r\n        // populate return array\r\n        uint256 index = 0;\r\n        address currentOwner = owners[sentinelOwners];\r\n        while (currentOwner != sentinelOwners) {\r\n            array[index] = currentOwner;\r\n            currentOwner = owners[currentOwner];\r\n            index++;\r\n        }\r\n        return array;\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/SafeToL2Setup.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {SafeStorage} from \"../libraries/SafeStorage.sol\";\r\n\r\n/**\r\n * @title Safe to L2 Setup Contract\r\n * @dev This contract expects the singleton to be the {Safe} by default. Even if there are more\r\n * {SafeL2} proxies deployed, the average gas cost on L2s is significantly lower, making the\r\n * current design more economically efficient overall.\r\n * @notice This contract facilitates the deployment of a Safe to the same address on all networks by\r\n *         automatically changing the singleton to the L2 version when not on chain ID 1.\r\n */\r\ncontract SafeToL2Setup is SafeStorage {\r\n    /**\r\n     * @dev Address of the contract.\r\n     *      This is used to ensure that the contract is only ever `DELEGATECALL`-ed.\r\n     */\r\n    address private immutable SELF;\r\n\r\n    /**\r\n     * @notice Event indicating a change of master copy address.\r\n     * @param singleton New master copy address\r\n     */\r\n    event ChangedMasterCopy(address singleton);\r\n\r\n    /**\r\n     * @notice Initializes a new {SafeToL2Setup} instance.\r\n     */\r\n    constructor() {\r\n        SELF = address(this);\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier ensure a function is only called via `DELEGATECALL`. Will revert otherwise.\r\n     */\r\n    modifier onlyDelegateCall() {\r\n        require(address(this) != SELF, \"SafeToL2Setup should only be called via delegatecall\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to prevent using initialized Safes.\r\n     */\r\n    modifier onlyNonceZero() {\r\n        require(nonce == 0, \"Safe must have not executed any tx\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Modifier to ensure that the specified account is a contract.\r\n     *\r\n     */\r\n    modifier onlyContract(address account) {\r\n        require(codeSize(account) != 0, \"Account doesn't contain code\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @notice Setup the Safe with the provided L2 singleton if needed.\r\n     * @dev This function checks that the chain ID is not 1, and if it isn't updates the singleton\r\n     *      to the provided L2 singleton.\r\n     */\r\n    function setupToL2(address l2Singleton) external onlyDelegateCall onlyNonceZero onlyContract(l2Singleton) {\r\n        if (chainId() != 1) {\r\n            singleton = l2Singleton;\r\n            emit ChangedMasterCopy(l2Singleton);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current chain ID.\r\n     */\r\n    function chainId() private view returns (uint256 result) {\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := chainid()\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the code size of the specified account.\r\n     */\r\n    function codeSize(address account) internal view returns (uint256 result) {\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            result := extcodesize(account)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n    }\r\n}\r\n"
    },
    "contracts/libraries/SignMessageLib.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {ISafe} from \"./../interfaces/ISafe.sol\";\r\nimport {SafeStorage} from \"./SafeStorage.sol\";\r\n\r\n/**\r\n * @title SignMessageLib - Allows to sign messages on-chain by writing the signed message hashes on-chain.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract SignMessageLib is SafeStorage {\r\n    // keccak256(\"SafeMessage(bytes message)\");\r\n    bytes32 private constant SAFE_MSG_TYPEHASH = 0x60b3cbf8b4a223d68d641b3b6ddf9a298e7f33710cf3d3a9d1146b5a6150fbca;\r\n\r\n    event SignMsg(bytes32 indexed msgHash);\r\n\r\n    /**\r\n     * @notice Marks a message (`_data`) as signed.\r\n     * @dev Can be verified using EIP-1271 validation method by passing the pre-image of the message hash and empty bytes as the signature.\r\n     * @param _data Arbitrary length data that should be marked as signed on the behalf of address(this).\r\n     */\r\n    function signMessage(bytes calldata _data) external {\r\n        bytes32 msgHash = getMessageHash(_data);\r\n        signedMessages[msgHash] = 1;\r\n        emit SignMsg(msgHash);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns hash of a message that can be signed by owners.\r\n     * @param message Message that should be hashed.\r\n     * @return Message hash.\r\n     */\r\n    function getMessageHash(bytes memory message) public view returns (bytes32) {\r\n        bytes32 safeMessageHash = keccak256(abi.encode(SAFE_MSG_TYPEHASH, keccak256(message)));\r\n        return keccak256(abi.encodePacked(bytes1(0x19), bytes1(0x01), ISafe(payable(address(this))).domainSeparator(), safeMessageHash));\r\n    }\r\n}\r\n"
    },
    "contracts/proxies/IProxyCreationCallback.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\nimport {SafeProxy} from \"./SafeProxy.sol\";\r\n\r\n/**\r\n * @title IProxyCreationCallback\r\n * @dev An interface for a contract that implements a callback function to be executed after the creation of a proxy instance.\r\n */\r\ninterface IProxyCreationCallback {\r\n    /**\r\n     * @dev Function to be called after the creation of a SafeProxy instance.\r\n     * @param proxy The newly created SafeProxy instance.\r\n     * @param _singleton The address of the singleton contract used to create the proxy.\r\n     * @param initializer The initializer function call data.\r\n     * @param saltNonce The nonce used to generate the salt for the proxy deployment.\r\n     */\r\n    function proxyCreated(SafeProxy proxy, address _singleton, bytes calldata initializer, uint256 saltNonce) external;\r\n}\r\n"
    },
    "contracts/proxies/SafeProxy.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n/* solhint-disable one-contract-per-file */\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title IProxy - Helper interface to access the singleton address of the Proxy on-chain.\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ninterface IProxy {\r\n    function masterCopy() external view returns (address);\r\n}\r\n\r\n/**\r\n * @title SafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\r\n * @author Stefan George - <stefan@gnosis.io>\r\n * @author Richard Meissner - <richard@gnosis.io>\r\n */\r\ncontract SafeProxy {\r\n    // Singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\r\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\r\n    address internal singleton;\r\n\r\n    /**\r\n     * @notice Constructor function sets address of singleton contract.\r\n     * @param _singleton Singleton address.\r\n     */\r\n    constructor(address _singleton) {\r\n        require(_singleton != address(0), \"Invalid singleton address provided\");\r\n        singleton = _singleton;\r\n    }\r\n\r\n    /// @dev Fallback function forwards all transactions and returns all received return data.\r\n    fallback() external payable {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let _singleton := sload(0)\r\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\r\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\r\n                mstore(0, shr(12, shl(12, _singleton)))\r\n                return(0, 0x20)\r\n            }\r\n            calldatacopy(0, 0, calldatasize())\r\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\r\n            returndatacopy(0, 0, returndatasize())\r\n            if eq(success, 0) {\r\n                revert(0, returndatasize())\r\n            }\r\n            return(0, returndatasize())\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/proxies/SafeProxyFactory.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {IProxyCreationCallback} from \"./IProxyCreationCallback.sol\";\r\nimport {SafeProxy} from \"./SafeProxy.sol\";\r\n\r\n/**\r\n * @title Proxy Factory - Allows to create a new proxy contract and execute a message call to the new proxy within one transaction.\r\n * @author Stefan George - @Georgi87\r\n */\r\ncontract SafeProxyFactory {\r\n    event ProxyCreation(SafeProxy indexed proxy, address singleton);\r\n\r\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\r\n    function proxyCreationCode() public pure returns (bytes memory) {\r\n        return type(SafeProxy).creationCode;\r\n    }\r\n\r\n    /**\r\n     * @notice Internal method to create a new proxy contract using CREATE2. Optionally executes an initializer call to a new proxy.\r\n     * @param _singleton Address of singleton contract. Must be deployed at the time of execution.\r\n     * @param initializer (Optional) Payload for a message call to be sent to a new proxy contract.\r\n     * @param salt Create2 salt to use for calculating the address of the new proxy contract.\r\n     * @return proxy Address of the new proxy contract.\r\n     */\r\n    function deployProxy(address _singleton, bytes memory initializer, bytes32 salt) internal returns (SafeProxy proxy) {\r\n        require(isContract(_singleton), \"Singleton contract not deployed\");\r\n\r\n        bytes memory deploymentData = abi.encodePacked(type(SafeProxy).creationCode, uint256(uint160(_singleton)));\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n        require(address(proxy) != address(0), \"Create2 call failed\");\r\n\r\n        if (initializer.length > 0) {\r\n            /* solhint-disable no-inline-assembly */\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\r\n                    revert(0, 0)\r\n                }\r\n            }\r\n            /* solhint-enable no-inline-assembly */\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Deploys a new proxy with `_singleton` singleton and `saltNonce` salt. Optionally executes an initializer call to a new proxy.\r\n     * @param _singleton Address of singleton contract. Must be deployed at the time of execution.\r\n     * @param initializer Payload for a message call to be sent to a new proxy contract.\r\n     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n     */\r\n    function createProxyWithNonce(address _singleton, bytes memory initializer, uint256 saltNonce) public returns (SafeProxy proxy) {\r\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\r\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\r\n        proxy = deployProxy(_singleton, initializer, salt);\r\n        emit ProxyCreation(proxy, _singleton);\r\n    }\r\n\r\n    /**\r\n     * @notice Deploys a new chain-specific proxy with `_singleton` singleton and `saltNonce` salt. Optionally executes an initializer call to a new proxy.\r\n     * @dev Allows to create a new proxy contract that should exist only on 1 network (e.g. specific governance or admin accounts)\r\n     *      by including the chain id in the create2 salt. Such proxies cannot be created on other networks by replaying the transaction.\r\n     * @param _singleton Address of singleton contract. Must be deployed at the time of execution.\r\n     * @param initializer Payload for a message call to be sent to a new proxy contract.\r\n     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n     */\r\n    function createChainSpecificProxyWithNonce(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce\r\n    ) public returns (SafeProxy proxy) {\r\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatenating it\r\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce, getChainId()));\r\n        proxy = deployProxy(_singleton, initializer, salt);\r\n        emit ProxyCreation(proxy, _singleton);\r\n    }\r\n\r\n    /**\r\n     * @notice Deploy a new proxy with `_singleton` singleton and `saltNonce` salt.\r\n     *         Optionally executes an initializer call to a new proxy and calls a specified callback address `callback`.\r\n     * @param _singleton Address of singleton contract. Must be deployed at the time of execution.\r\n     * @param initializer Payload for a message call to be sent to a new proxy contract.\r\n     * @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\r\n     * @param callback Callback that will be invoked after the new proxy contract has been successfully deployed and initialized.\r\n     */\r\n    function createProxyWithCallback(\r\n        address _singleton,\r\n        bytes memory initializer,\r\n        uint256 saltNonce,\r\n        IProxyCreationCallback callback\r\n    ) public returns (SafeProxy proxy) {\r\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\r\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\r\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is a contract.\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     *      as the code is not actually created until after the constructor finishes.\r\n     * @param account The address being queried\r\n     * @return True if `account` is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the ID of the chain the contract is currently deployed on.\r\n     * @return The ID of the current chain as a uint256.\r\n     */\r\n    function getChainId() public view returns (uint256) {\r\n        uint256 id;\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            id := chainid()\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n        return id;\r\n    }\r\n}\r\n"
    },
    "contracts/Safe.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {FallbackManager} from \"./base/FallbackManager.sol\";\r\nimport {ITransactionGuard, GuardManager} from \"./base/GuardManager.sol\";\r\nimport {ModuleManager} from \"./base/ModuleManager.sol\";\r\nimport {OwnerManager} from \"./base/OwnerManager.sol\";\r\nimport {NativeCurrencyPaymentFallback} from \"./common/NativeCurrencyPaymentFallback.sol\";\r\nimport {SecuredTokenTransfer} from \"./common/SecuredTokenTransfer.sol\";\r\nimport {SignatureDecoder} from \"./common/SignatureDecoder.sol\";\r\nimport {Singleton} from \"./common/Singleton.sol\";\r\nimport {StorageAccessible} from \"./common/StorageAccessible.sol\";\r\nimport {SafeMath} from \"./external/SafeMath.sol\";\r\nimport {ISafe} from \"./interfaces/ISafe.sol\";\r\nimport {ISignatureValidator, ISignatureValidatorConstants} from \"./interfaces/ISignatureValidator.sol\";\r\nimport {Enum} from \"./libraries/Enum.sol\";\r\n\r\n/**\r\n * @title Safe - A multisignature wallet with support for confirmations using signed messages based on EIP-712.\r\n * @dev Most important concepts:\r\n *      - Threshold: Number of required confirmations for a Safe transaction.\r\n *      - Owners: List of addresses that control the Safe. They are the only ones that can add/remove owners, change the threshold and\r\n *        approve transactions. Managed in `OwnerManager`.\r\n *      - Transaction Hash: Hash of a transaction is calculated using the EIP-712 typed structured data hashing scheme.\r\n *      - Nonce: Each transaction should have a different nonce to prevent replay attacks.\r\n *      - Signature: A valid signature of an owner of the Safe for a transaction hash.\r\n *      - Guards: Guards are contracts that can execute pre- and post- transaction checks. There are two types of guards:\r\n *          1. Transaction Guard: managed in `GuardManager` for transactions executed with `execTransaction`.\r\n *          2. Module Guard: managed in `ModuleManager` for transactions executed with `execTransactionFromModule`\r\n *      - Modules: Modules are contracts that can be used to extend the write functionality of a Safe. Managed in `ModuleManager`.\r\n *      - Fallback: Fallback handler is a contract that can provide additional read-only functional for Safe. Managed in `FallbackManager`.\r\n *      Note: This version of the implementation contract doesn't emit events for the sake of gas efficiency and therefore requires a tracing node for indexing/\r\n *      For the events-based implementation see `SafeL2.sol`.\r\n * @author Stefan George - @Georgi87\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract Safe is\r\n    Singleton,\r\n    NativeCurrencyPaymentFallback,\r\n    ModuleManager,\r\n    GuardManager,\r\n    OwnerManager,\r\n    SignatureDecoder,\r\n    SecuredTokenTransfer,\r\n    ISignatureValidatorConstants,\r\n    FallbackManager,\r\n    StorageAccessible,\r\n    ISafe\r\n{\r\n    using SafeMath for uint256;\r\n\r\n    string public constant override VERSION = \"1.4.1\";\r\n\r\n    // keccak256(\r\n    //     \"EIP712Domain(uint256 chainId,address verifyingContract)\"\r\n    // );\r\n    bytes32 private constant DOMAIN_SEPARATOR_TYPEHASH = 0x47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a79469218;\r\n\r\n    // keccak256(\r\n    //     \"SafeTx(address to,uint256 value,bytes data,uint8 operation,uint256 safeTxGas,uint256 baseGas,uint256 gasPrice,address gasToken,address refundReceiver,uint256 nonce)\"\r\n    // );\r\n    bytes32 private constant SAFE_TX_TYPEHASH = 0xbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d8;\r\n\r\n    uint256 public override nonce;\r\n    bytes32 private _deprecatedDomainSeparator;\r\n    // Mapping to keep track of all message hashes that have been approved by ALL REQUIRED owners\r\n    mapping(bytes32 => uint256) public override signedMessages;\r\n    // Mapping to keep track of all hashes (message or transaction) that have been approved by ANY owners\r\n    mapping(address => mapping(bytes32 => uint256)) public override approvedHashes;\r\n\r\n    // This constructor ensures that this contract can only be used as a singleton for Proxy contracts\r\n    constructor() {\r\n        /**\r\n         * By setting the threshold it is not possible to call setup anymore,\r\n         * so we create a Safe with 0 owners and threshold 1.\r\n         * This is an unusable Safe, perfect for the singleton\r\n         */\r\n        threshold = 1;\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISafe\r\n     */\r\n    function setup(\r\n        address[] calldata _owners,\r\n        uint256 _threshold,\r\n        address to,\r\n        bytes calldata data,\r\n        address fallbackHandler,\r\n        address paymentToken,\r\n        uint256 payment,\r\n        address payable paymentReceiver\r\n    ) external override {\r\n        // setupOwners checks if the Threshold is already set, therefore preventing that this method is called twice\r\n        setupOwners(_owners, _threshold);\r\n        if (fallbackHandler != address(0)) internalSetFallbackHandler(fallbackHandler);\r\n        // As setupOwners can only be called if the contract has not been initialized we don't need a check for setupModules\r\n        setupModules(to, data);\r\n\r\n        if (payment > 0) {\r\n            // To avoid running into issues with EIP-170 we reuse the handlePayment function (to avoid adjusting code of that has been verified we do not adjust the method itself)\r\n            // baseGas = 0, gasPrice = 1 and gas = payment => amount = (payment + 0) * 1 = payment\r\n            handlePayment(payment, 0, 1, paymentToken, paymentReceiver);\r\n        }\r\n        emit SafeSetup(msg.sender, _owners, _threshold, to, fallbackHandler);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISafe\r\n     */\r\n    function execTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address payable refundReceiver,\r\n        bytes memory signatures\r\n    ) external payable override returns (bool success) {\r\n        onBeforeExecTransaction(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures);\r\n        bytes32 txHash;\r\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\r\n        {\r\n            txHash = getTransactionHash( // Transaction info\r\n                to,\r\n                value,\r\n                data,\r\n                operation,\r\n                safeTxGas,\r\n                // Payment info\r\n                baseGas,\r\n                gasPrice,\r\n                gasToken,\r\n                refundReceiver,\r\n                // Signature info\r\n                // We use the post-increment here, so the current nonce value is used and incremented afterwards.\r\n                nonce++\r\n            );\r\n            checkSignatures(txHash, signatures);\r\n        }\r\n        address guard = getGuard();\r\n        {\r\n            if (guard != address(0)) {\r\n                ITransactionGuard(guard).checkTransaction(\r\n                    // Transaction info\r\n                    to,\r\n                    value,\r\n                    data,\r\n                    operation,\r\n                    safeTxGas,\r\n                    // Payment info\r\n                    baseGas,\r\n                    gasPrice,\r\n                    gasToken,\r\n                    refundReceiver,\r\n                    // Signature info\r\n                    signatures,\r\n                    msg.sender\r\n                );\r\n            }\r\n        }\r\n\r\n        // We require some gas to emit the events (at least 2500) after the execution and some to perform code until the execution (500)\r\n        // We also include the 1/64 in the check that is not send along with a call to counteract potential shortings because of EIP-150\r\n        if (gasleft() < ((safeTxGas * 64) / 63).max(safeTxGas + 2500) + 500) revertWithError(\"GS010\");\r\n        // Use scope here to limit variable lifetime and prevent `stack too deep` errors\r\n        {\r\n            uint256 gasUsed = gasleft();\r\n            // If the gasPrice is 0 we assume that nearly all available gas can be used (it is always more than safeTxGas)\r\n            // We only subtract 2500 (compared to the 3000 before) to ensure that the amount passed is still higher than safeTxGas\r\n            success = execute(to, value, data, operation, gasPrice == 0 ? (gasleft() - 2500) : safeTxGas);\r\n            gasUsed = gasUsed.sub(gasleft());\r\n            // If no safeTxGas and no gasPrice was set (e.g. both are 0), then the internal tx is required to be successful\r\n            // This makes it possible to use `estimateGas` without issues, as it searches for the minimum gas where the tx doesn't revert\r\n            if (!success && safeTxGas == 0 && gasPrice == 0) {\r\n                /* solhint-disable no-inline-assembly */\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    let p := mload(0x40)\r\n                    returndatacopy(p, 0, returndatasize())\r\n                    revert(p, returndatasize())\r\n                }\r\n                /* solhint-enable no-inline-assembly */\r\n            }\r\n            // We transfer the calculated tx costs to the tx.origin to avoid sending it to intermediate contracts that have made calls\r\n            uint256 payment = 0;\r\n            if (gasPrice > 0) {\r\n                payment = handlePayment(gasUsed, baseGas, gasPrice, gasToken, refundReceiver);\r\n            }\r\n            if (success) emit ExecutionSuccess(txHash, payment);\r\n            else emit ExecutionFailure(txHash, payment);\r\n        }\r\n        {\r\n            if (guard != address(0)) {\r\n                ITransactionGuard(guard).checkAfterExecution(txHash, success);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Handles the payment for a Safe transaction.\r\n     * @param gasUsed Gas used by the Safe transaction.\r\n     * @param baseGas Gas costs that are independent of the transaction execution (e.g. base transaction fee, signature check, payment of the refund).\r\n     * @param gasPrice Gas price that should be used for the payment calculation.\r\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n     * @return payment The amount of payment made in the specified token.\r\n     */\r\n    function handlePayment(\r\n        uint256 gasUsed,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address payable refundReceiver\r\n    ) private returns (uint256 payment) {\r\n        // solhint-disable-next-line avoid-tx-origin\r\n        address payable receiver = refundReceiver == address(0) ? payable(tx.origin) : refundReceiver;\r\n        if (gasToken == address(0)) {\r\n            // For native tokens, we will only adjust the gas price to not be higher than the actually used gas price\r\n            payment = gasUsed.add(baseGas).mul(gasPrice < tx.gasprice ? gasPrice : tx.gasprice);\r\n            (bool refundSuccess, ) = receiver.call{value: payment}(\"\");\r\n            if (!refundSuccess) revertWithError(\"GS011\");\r\n        } else {\r\n            payment = gasUsed.add(baseGas).mul(gasPrice);\r\n            if (!transferToken(gasToken, receiver, payment)) revertWithError(\"GS012\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks whether the contract signature is valid. Reverts otherwise.\r\n     * @dev This is extracted to a separate function for better compatibility with Certora's prover.\r\n     *      More info here: https://github.com/safe-global/safe-smart-account/pull/661\r\n     * @param owner Address of the owner used to sign the message\r\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\r\n     * @param signatures Signature data that should be verified.\r\n     * @param offset Offset to the start of the contract signature in the signatures byte array\r\n     */\r\n    function checkContractSignature(address owner, bytes32 dataHash, bytes memory signatures, uint256 offset) internal view {\r\n        // Check that signature data pointer (s) is in bounds (points to the length of data -> 32 bytes)\r\n        if (offset.add(32) > signatures.length) revertWithError(\"GS022\");\r\n\r\n        // Check if the contract signature is in bounds: start of data is s + 32 and end is start + signature length\r\n        uint256 contractSignatureLen;\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            contractSignatureLen := mload(add(add(signatures, offset), 0x20))\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n        if (offset.add(32).add(contractSignatureLen) > signatures.length) revertWithError(\"GS023\");\r\n\r\n        // Check signature\r\n        bytes memory contractSignature;\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // The signature data for contract signatures is appended to the concatenated signatures and the offset is stored in s\r\n            contractSignature := add(add(signatures, offset), 0x20)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n\r\n        if (ISignatureValidator(owner).isValidSignature(dataHash, contractSignature) != EIP1271_MAGIC_VALUE) revertWithError(\"GS024\");\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISafe\r\n     */\r\n    function checkSignatures(bytes32 dataHash, bytes memory signatures) public view override {\r\n        // Load threshold to avoid multiple storage loads\r\n        uint256 _threshold = threshold;\r\n        // Check that a threshold is set\r\n        if (_threshold == 0) revertWithError(\"GS001\");\r\n        checkNSignatures(msg.sender, dataHash, signatures, _threshold);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISafe\r\n     */\r\n    function checkNSignatures(\r\n        address executor,\r\n        bytes32 dataHash,\r\n        bytes memory signatures,\r\n        uint256 requiredSignatures\r\n    ) public view override {\r\n        // Check that the provided signature data is not too short\r\n        if (signatures.length < requiredSignatures.mul(65)) revertWithError(\"GS020\");\r\n        // There cannot be an owner with address 0.\r\n        address lastOwner = address(0);\r\n        address currentOwner;\r\n        uint256 v; // Implicit conversion from uint8 to uint256 will be done for v received from signatureSplit(...).\r\n        bytes32 r;\r\n        bytes32 s;\r\n        uint256 i;\r\n        for (i = 0; i < requiredSignatures; i++) {\r\n            (v, r, s) = signatureSplit(signatures, i);\r\n            if (v == 0) {\r\n                // If v is 0 then it is a contract signature\r\n                // When handling contract signatures the address of the contract is encoded into r\r\n                currentOwner = address(uint160(uint256(r)));\r\n\r\n                // Check that signature data pointer (s) is not pointing inside the static part of the signatures bytes\r\n                // This check is not completely accurate, since it is possible that more signatures than the threshold are send.\r\n                // Here we only check that the pointer is not pointing inside the part that is being processed\r\n                if (uint256(s) < requiredSignatures.mul(65)) revertWithError(\"GS021\");\r\n\r\n                // The contract signature check is extracted to a separate function for better compatibility with formal verification\r\n                // A quote from the Certora team:\r\n                // \"The assembly code broke the pointer analysis, which switched the prover in failsafe mode, where it is (a) much slower and (b) computes different hashes than in the normal mode.\"\r\n                // More info here: https://github.com/safe-global/safe-smart-account/pull/661\r\n                checkContractSignature(currentOwner, dataHash, signatures, uint256(s));\r\n            } else if (v == 1) {\r\n                // If v is 1 then it is an approved hash\r\n                // When handling approved hashes the address of the approver is encoded into r\r\n                currentOwner = address(uint160(uint256(r)));\r\n                // Hashes are automatically approved by the sender of the message or when they have been pre-approved via a separate transaction\r\n                if (executor != currentOwner && approvedHashes[currentOwner][dataHash] == 0) revertWithError(\"GS025\");\r\n            } else if (v > 30) {\r\n                // If v > 30 then default va (27,28) has been adjusted for eth_sign flow\r\n                // To support eth_sign and similar we adjust v and hash the messageHash with the Ethereum message prefix before applying ecrecover\r\n                currentOwner = ecrecover(keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", dataHash)), uint8(v - 4), r, s);\r\n            } else {\r\n                // Default is the ecrecover flow with the provided data hash\r\n                // Use ecrecover with the messageHash for EOA signatures\r\n                currentOwner = ecrecover(dataHash, uint8(v), r, s);\r\n            }\r\n            if (currentOwner <= lastOwner || owners[currentOwner] == address(0) || currentOwner == SENTINEL_OWNERS)\r\n                revertWithError(\"GS026\");\r\n            lastOwner = currentOwner;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Checks whether the signature provided is valid for the provided hash. Reverts otherwise.\r\n     *         The `data` parameter is completely ignored during signature verification.\r\n     * @dev This function is provided for compatibility with previous versions.\r\n     *      Use `checkSignatures(bytes32,bytes)` instead.\r\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash).\r\n     * @param data **IGNORED** The data pre-image.\r\n     * @param signatures Signature data that should be verified.\r\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\r\n     */\r\n    function checkSignatures(bytes32 dataHash, bytes calldata data, bytes memory signatures) external view {\r\n        data;\r\n        checkSignatures(dataHash, signatures);\r\n    }\r\n\r\n    /**\r\n     * @notice Checks whether the signature provided is valid for the provided hash. Reverts otherwise.\r\n     *         The `data` parameter is completely ignored during signature verification.\r\n     * @dev This function is provided for compatibility with previous versions.\r\n     *      Use `checkNSignatures(address,bytes32,bytes,uint256)` instead.\r\n     * @param dataHash Hash of the data (could be either a message hash or transaction hash)\r\n     * @param data **IGNORED** The data pre-image.\r\n     * @param signatures Signature data that should be verified.\r\n     *                   Can be packed ECDSA signature ({bytes32 r}{bytes32 s}{uint8 v}), contract signature (EIP-1271) or approved hash.\r\n     * @param requiredSignatures Amount of required valid signatures.\r\n     */\r\n    function checkNSignatures(bytes32 dataHash, bytes calldata data, bytes memory signatures, uint256 requiredSignatures) external view {\r\n        data;\r\n        checkNSignatures(msg.sender, dataHash, signatures, requiredSignatures);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISafe\r\n     */\r\n    function approveHash(bytes32 hashToApprove) external override {\r\n        if (owners[msg.sender] == address(0)) revertWithError(\"GS030\");\r\n        approvedHashes[msg.sender][hashToApprove] = 1;\r\n        emit ApproveHash(hashToApprove, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISafe\r\n     */\r\n    function domainSeparator() public view override returns (bytes32) {\r\n        uint256 chainId;\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            chainId := chainid()\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n\r\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_TYPEHASH, chainId, this));\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the pre-image of the transaction hash (see getTransactionHash).\r\n     * @param to Destination address.\r\n     * @param value Ether value.\r\n     * @param data Data payload.\r\n     * @param operation Operation type.\r\n     * @param safeTxGas Gas that should be used for the safe transaction.\r\n     * @param baseGas Gas costs for that are independent of the transaction execution(e.g. base transaction fee, signature check, payment of the refund)\r\n     * @param gasPrice Maximum gas price that should be used for this transaction.\r\n     * @param gasToken Token address (or 0 if ETH) that is used for the payment.\r\n     * @param refundReceiver Address of receiver of gas payment (or 0 if tx.origin).\r\n     * @param _nonce Transaction nonce.\r\n     * @return Transaction hash bytes.\r\n     */\r\n    function encodeTransactionData(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address refundReceiver,\r\n        uint256 _nonce\r\n    ) private view returns (bytes memory) {\r\n        bytes32 safeTxHash = keccak256(\r\n            abi.encode(\r\n                SAFE_TX_TYPEHASH,\r\n                to,\r\n                value,\r\n                keccak256(data),\r\n                operation,\r\n                safeTxGas,\r\n                baseGas,\r\n                gasPrice,\r\n                gasToken,\r\n                refundReceiver,\r\n                _nonce\r\n            )\r\n        );\r\n        return abi.encodePacked(bytes1(0x19), bytes1(0x01), domainSeparator(), safeTxHash);\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ISafe\r\n     */\r\n    function getTransactionHash(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address refundReceiver,\r\n        uint256 _nonce\r\n    ) public view override returns (bytes32) {\r\n        return keccak256(encodeTransactionData(to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce));\r\n    }\r\n\r\n    /**\r\n     * @notice A hook that gets called before execution of {execTransaction} method.\r\n     * @param to Destination address of module transaction.\r\n     * @param value Ether value of module transaction.\r\n     * @param data Data payload of module transaction.\r\n     * @param operation Operation type of module transaction.\r\n     */\r\n    function onBeforeExecTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address payable refundReceiver,\r\n        bytes memory signatures\r\n    ) internal virtual {}\r\n}\r\n"
    },
    "contracts/SafeL2.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n// The import is used in the @inheritdoc, false positive\r\n// solhint-disable-next-line no-unused-import\r\nimport {ModuleManager} from \"./base/ModuleManager.sol\";\r\nimport {Safe, Enum} from \"./Safe.sol\";\r\n\r\n/**\r\n * @title SafeL2 - An implementation of the Safe contract that emits additional events on transaction executions.\r\n * @notice For a more complete description of the Safe contract, please refer to the main Safe contract `Safe.sol`.\r\n * @author Stefan George - @Georgi87\r\n * @author Richard Meissner - @rmeissner\r\n */\r\ncontract SafeL2 is Safe {\r\n    event SafeMultiSigTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address payable refundReceiver,\r\n        bytes signatures,\r\n        // We combine nonce, sender and threshold into one to avoid stack too deep\r\n        // Dev note: additionalInfo should not contain `bytes`, as this complicates decoding\r\n        bytes additionalInfo\r\n    );\r\n\r\n    event SafeModuleTransaction(address module, address to, uint256 value, bytes data, Enum.Operation operation);\r\n\r\n    /**\r\n     * @inheritdoc Safe\r\n     */\r\n    function onBeforeExecTransaction(\r\n        address to,\r\n        uint256 value,\r\n        bytes calldata data,\r\n        Enum.Operation operation,\r\n        uint256 safeTxGas,\r\n        uint256 baseGas,\r\n        uint256 gasPrice,\r\n        address gasToken,\r\n        address payable refundReceiver,\r\n        bytes memory signatures\r\n    ) internal override {\r\n        bytes memory additionalInfo;\r\n        {\r\n            additionalInfo = abi.encode(nonce, msg.sender, threshold);\r\n        }\r\n        emit SafeMultiSigTransaction(\r\n            to,\r\n            value,\r\n            data,\r\n            operation,\r\n            safeTxGas,\r\n            baseGas,\r\n            gasPrice,\r\n            gasToken,\r\n            refundReceiver,\r\n            signatures,\r\n            additionalInfo\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @inheritdoc ModuleManager\r\n     */\r\n    function onBeforeExecTransactionFromModule(address to, uint256 value, bytes memory data, Enum.Operation operation) internal override {\r\n        emit SafeModuleTransaction(msg.sender, to, value, data, operation);\r\n    }\r\n}\r\n"
    },
    "contracts/test/DelegateCaller.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/**\r\n * @title DelegateCaller - A test contract that executes delegatecalls\r\n */\r\ncontract DelegateCaller {\r\n    /**\r\n     * @notice makes a delegatecall\r\n     * @param _called The address to be delegate called\r\n     * @param _calldata the calldata of the call\r\n     */\r\n    function makeDelegatecall(address _called, bytes memory _calldata) external returns (bool success, bytes memory returnData) {\r\n        (success, returnData) = _called.delegatecall(_calldata);\r\n        if (!success) {\r\n            /* solhint-disable no-inline-assembly */\r\n            assembly {\r\n                returndatacopy(0, 0, returndatasize())\r\n                revert(0, returndatasize())\r\n            }\r\n            /* solhint-enable no-inline-assembly */\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/test/ERC1155Token.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {SafeMath} from \"./../external/SafeMath.sol\";\r\nimport {ERC1155TokenReceiver} from \"./../interfaces/ERC1155TokenReceiver.sol\";\r\n\r\n/**\r\n * @title ERC1155Token - A test ERC1155 token contract\r\n */\r\ncontract ERC1155Token {\r\n    using SafeMath for uint256;\r\n\r\n    // Mapping from token ID to owner balances\r\n    mapping(uint256 => mapping(address => uint256)) private _balances;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Get the specified address' balance for token with specified ID.\r\n     * @param owner The address of the token holder\r\n     * @param id ID of the token\r\n     * @return The owner's balance of the token type requested\r\n     */\r\n    function balanceOf(address owner, uint256 id) public view returns (uint256) {\r\n        require(owner != address(0), \"ERC1155: balance query for the zero address\");\r\n        return _balances[id][owner];\r\n    }\r\n\r\n    /**\r\n     * @notice Transfers `value` amount of an `id` from the `from` address to the `to` address specified.\r\n     *         Caller must be approved to manage the tokens being transferred out of the `from` account.\r\n     *         If `to` is a smart contract, will call `onERC1155Received` on `to` and act appropriately.\r\n     * @param from Source address\r\n     * @param to Target address\r\n     * @param id ID of the token type\r\n     * @param value Transfer amount\r\n     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external {\r\n        require(to != address(0), \"ERC1155: target address must be non-zero\");\r\n        require(\r\n            from == msg.sender || _operatorApprovals[from][msg.sender] == true,\r\n            \"ERC1155: need operator approval for 3rd party transfers.\"\r\n        );\r\n\r\n        _balances[id][from] = _balances[id][from] - value;\r\n        _balances[id][to] = value + _balances[id][to];\r\n\r\n        _doSafeTransferAcceptanceCheck(msg.sender, from, to, id, value, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Test function to mint an amount of a token with the given ID\r\n     * @param to The address that will own the minted token\r\n     * @param id ID of the token to be minted\r\n     * @param value Amount of the token to be minted\r\n     * @param data Data forwarded to `onERC1155Received` if `to` is a contract receiver\r\n     */\r\n    function mint(address to, uint256 id, uint256 value, bytes calldata data) external {\r\n        require(to != address(0), \"ERC1155: mint to the zero address\");\r\n\r\n        _balances[id][to] = value + _balances[id][to];\r\n\r\n        _doSafeTransferAcceptanceCheck(msg.sender, address(0), to, id, value, data);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns true if `account` is a contract.\r\n     * @dev This function will return false if invoked during the constructor of a contract,\r\n     *      as the code is not actually created until after the constructor finishes.\r\n     * @param account The address being queried\r\n     * @return True if `account` is a contract\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        uint256 size;\r\n        /* solhint-disable no-inline-assembly */\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        /* solhint-enable no-inline-assembly */\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to invoke `onERC1155Received` on a target address\r\n     * The call is not executed if the target address is not a contract\r\n     * @param operator  The address which initiated the transfer (i.e. msg.sender)\r\n     * @param from      The address which previously owned the token\r\n     * @param to        The address which will now own the token\r\n     * @param id        The id of the token being transferred\r\n     * @param value     The amount of tokens being transferred\r\n     * @param data      Additional data with no specified format\r\n     */\r\n    function _doSafeTransferAcceptanceCheck(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 id,\r\n        uint256 value,\r\n        bytes memory data\r\n    ) internal {\r\n        if (isContract(to)) {\r\n            require(\r\n                ERC1155TokenReceiver(to).onERC1155Received(operator, from, id, value, data) ==\r\n                    ERC1155TokenReceiver(to).onERC1155Received.selector,\r\n                \"ERC1155: got unknown value from onERC1155Received\"\r\n            );\r\n        }\r\n    }\r\n}\r\n"
    },
    "contracts/test/Test4337ModuleAndHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\n/* solhint-disable one-contract-per-file */\r\npragma solidity >=0.7.0 <0.9.0;\r\npragma abicoder v2;\r\n\r\nstruct UserOperation {\r\n    address sender;\r\n    uint256 nonce;\r\n    bytes initCode;\r\n    bytes callData;\r\n    uint256 callGasLimit;\r\n    uint256 verificationGasLimit;\r\n    uint256 preVerificationGas;\r\n    uint256 maxFeePerGas;\r\n    uint256 maxPriorityFeePerGas;\r\n    bytes paymasterAndData;\r\n    bytes signature;\r\n}\r\n\r\ninterface ISafe {\r\n    function enableModule(address module) external;\r\n\r\n    function execTransactionFromModule(address to, uint256 value, bytes memory data, uint8 operation) external returns (bool success);\r\n}\r\n\r\n/// @dev A Dummy 4337 Module/Handler for testing purposes\r\n///      ⚠️ ⚠️ ⚠️ DO NOT USE IN PRODUCTION ⚠️ ⚠️ ⚠️\r\n///      The module does not perform ANY validation, it just executes validateUserOp and execTransaction\r\n///      to perform the opcode level compliance by the bundler.\r\ncontract Test4337ModuleAndHandler {\r\n    address public immutable MY_ADDRESS;\r\n    address public immutable ENTRYPOINT;\r\n\r\n    address internal constant SENTINEL_MODULES = address(0x1);\r\n\r\n    constructor(address entryPointAddress) {\r\n        ENTRYPOINT = entryPointAddress;\r\n        MY_ADDRESS = address(this);\r\n    }\r\n\r\n    function validateUserOp(UserOperation calldata userOp, bytes32, uint256 missingAccountFunds) external returns (uint256 validationData) {\r\n        address payable safeAddress = payable(userOp.sender);\r\n        ISafe senderSafe = ISafe(safeAddress);\r\n\r\n        if (missingAccountFunds != 0) {\r\n            senderSafe.execTransactionFromModule(ENTRYPOINT, missingAccountFunds, \"\", 0);\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    function execTransaction(address to, uint256 value, bytes calldata data) external payable {\r\n        address payable safeAddress = payable(msg.sender);\r\n        ISafe safe = ISafe(safeAddress);\r\n        require(safe.execTransactionFromModule(to, value, data, 0), \"tx failed\");\r\n    }\r\n\r\n    function enableMyself() public {\r\n        ISafe(address(this)).enableModule(MY_ADDRESS);\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestHandler.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\nimport {HandlerContext} from \"../handler/HandlerContext.sol\";\r\n\r\n/**\r\n * @title TestHandler - A test FallbackHandler contract\r\n */\r\ncontract TestHandler is HandlerContext {\r\n    /**\r\n     * @notice Returns the sender and manager address provided by the HandlerContext\r\n     * @return sender The sender address\r\n     * @return manager The manager address\r\n     */\r\n    function dudududu() external view returns (address sender, address manager) {\r\n        return (_msgSender(), _manager());\r\n    }\r\n}\r\n"
    },
    "contracts/test/TestNativeTokenReceiver.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.7.0 <0.9.0;\r\n\r\n/// @title TestNativeTokenReceiver\r\n/// @dev This contract emits an event with sender, value, and remaining gas details whenever it receives Ether.\r\ncontract TestNativeTokenReceiver {\r\n    /// @dev Emitted when the contract receives Ether.\r\n    /// @param from The address of the sender.\r\n    /// @param amount The amount of Ether received, in wei.\r\n    /// @param forwardedGas The remaining gas at the time of transaction.\r\n    event BreadReceived(address indexed from, uint256 amount, uint256 forwardedGas);\r\n\r\n    /// @dev Fallback function that is called when the contract receives Ether.\r\n    /// Emits the BreadReceived event with the sender's address, the amount of Ether sent, and the remaining gas.\r\n    fallback() external payable {\r\n        emit BreadReceived(msg.sender, msg.value, gasleft());\r\n    }\r\n}\r\n"
    },
    "contracts/test/Token.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\r\npragma solidity >=0.6.0 <0.9.0;\r\n\r\ninterface Token {\r\n    function transfer(address _to, uint256 value) external returns (bool);\r\n}\r\n"
    }
  },
  "settings": {
    "viaIR": true,
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": true,
        "yulDetails": {
          "optimizerSteps": ""
        }
      }
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}